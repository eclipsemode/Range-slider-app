(()=>{var t={638:function(t,e){var n;!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,(function(o,r){"use strict";var i=[],s=Object.getPrototypeOf,a=i.slice,l=i.flat?function(t){return i.flat.call(t)}:function(t){return i.concat.apply([],t)},u=i.push,c=i.indexOf,p={},f=p.toString,h=p.hasOwnProperty,d=h.toString,m=d.call(Object),g={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},y=function(t){return null!=t&&t===t.window},b=o.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function T(t,e,n){var o,r,i=(n=n||b).createElement("script");if(i.text=t,e)for(o in x)(r=e[o]||e.getAttribute&&e.getAttribute(o))&&i.setAttribute(o,r);n.head.appendChild(i).parentNode.removeChild(i)}function w(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?p[f.call(t)]||"object":typeof t}var C="3.6.3",E=function(t,e){return new E.fn.init(t,e)};function _(t){var e=!!t&&"length"in t&&t.length,n=w(t);return!v(t)&&!y(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}E.fn=E.prototype={jquery:C,constructor:E,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=E.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return E.each(this,t)},map:function(t){return this.pushStack(E.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(E.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:i.sort,splice:i.splice},E.extend=E.fn.extend=function(){var t,e,n,o,r,i,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||v(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)o=t[e],"__proto__"!==e&&s!==o&&(u&&o&&(E.isPlainObject(o)||(r=Array.isArray(o)))?(n=s[e],i=r&&!Array.isArray(n)?[]:r||E.isPlainObject(n)?n:{},r=!1,s[e]=E.extend(u,i,o)):void 0!==o&&(s[e]=o));return s},E.extend({expando:"jQuery"+(C+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==f.call(t)||(e=s(t))&&("function"!=typeof(n=h.call(e,"constructor")&&e.constructor)||d.call(n)!==m))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){T(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,o=0;if(_(t))for(n=t.length;o<n&&!1!==e.call(t[o],o,t[o]);o++);else for(o in t)if(!1===e.call(t[o],o,t[o]))break;return t},makeArray:function(t,e){var n=e||[];return null!=t&&(_(Object(t))?E.merge(n,"string"==typeof t?[t]:t):u.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:c.call(e,t,n)},merge:function(t,e){for(var n=+e.length,o=0,r=t.length;o<n;o++)t[r++]=e[o];return t.length=r,t},grep:function(t,e,n){for(var o=[],r=0,i=t.length,s=!n;r<i;r++)!e(t[r],r)!==s&&o.push(t[r]);return o},map:function(t,e,n){var o,r,i=0,s=[];if(_(t))for(o=t.length;i<o;i++)null!=(r=e(t[i],i,n))&&s.push(r);else for(i in t)null!=(r=e(t[i],i,n))&&s.push(r);return l(s)},guid:1,support:g}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=i[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){p["[object "+e+"]"]=e.toLowerCase()}));var S=function(t){var e,n,o,r,i,s,a,l,u,c,p,f,h,d,m,g,v,y,b,x="sizzle"+1*new Date,T=t.document,w=0,C=0,E=lt(),_=lt(),S=lt(),A=lt(),k=function(t,e){return t===e&&(p=!0),0},D={}.hasOwnProperty,j=[],N=j.pop,O=j.push,L=j.push,q=j.slice,R=function(t,e){for(var n=0,o=t.length;n<o;n++)if(t[n]===e)return n;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",M="(?:\\\\[\\da-fA-F]{1,6}"+F+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",P="\\["+F+"*("+M+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+F+"*\\]",I=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",W=new RegExp(F+"+","g"),B=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),$=new RegExp("^"+F+"*,"+F+"*"),G=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),z=new RegExp(F+"|>"),X=new RegExp(I),U=new RegExp("^"+M+"$"),V={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+I),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\[\\da-fA-F]{1,6}"+F+"?|\\\\([^\\r\\n\\f])","g"),nt=function(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ot=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,rt=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},it=function(){f()},st=xt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{L.apply(j=q.call(T.childNodes),T.childNodes),j[T.childNodes.length].nodeType}catch(t){L={apply:j.length?function(t,e){O.apply(t,q.call(e))}:function(t,e){for(var n=t.length,o=0;t[n++]=e[o++];);t.length=n-1}}}function at(t,e,o,r){var i,a,u,c,p,d,v,y=e&&e.ownerDocument,T=e?e.nodeType:9;if(o=o||[],"string"!=typeof t||!t||1!==T&&9!==T&&11!==T)return o;if(!r&&(f(e),e=e||h,m)){if(11!==T&&(p=Z.exec(t)))if(i=p[1]){if(9===T){if(!(u=e.getElementById(i)))return o;if(u.id===i)return o.push(u),o}else if(y&&(u=y.getElementById(i))&&b(e,u)&&u.id===i)return o.push(u),o}else{if(p[2])return L.apply(o,e.getElementsByTagName(t)),o;if((i=p[3])&&n.getElementsByClassName&&e.getElementsByClassName)return L.apply(o,e.getElementsByClassName(i)),o}if(n.qsa&&!A[t+" "]&&(!g||!g.test(t))&&(1!==T||"object"!==e.nodeName.toLowerCase())){if(v=t,y=e,1===T&&(z.test(t)||G.test(t))){for((y=tt.test(t)&&vt(e.parentNode)||e)===e&&n.scope||((c=e.getAttribute("id"))?c=c.replace(ot,rt):e.setAttribute("id",c=x)),a=(d=s(t)).length;a--;)d[a]=(c?"#"+c:":scope")+" "+bt(d[a]);v=d.join(",")}try{if(n.cssSupportsSelector&&!CSS.supports("selector(:is("+v+"))"))throw new Error;return L.apply(o,y.querySelectorAll(v)),o}catch(e){A(t,!0)}finally{c===x&&e.removeAttribute("id")}}}return l(t.replace(B,"$1"),e,o,r)}function lt(){var t=[];return function e(n,r){return t.push(n+" ")>o.cacheLength&&delete e[t.shift()],e[n+" "]=r}}function ut(t){return t[x]=!0,t}function ct(t){var e=h.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function pt(t,e){for(var n=t.split("|"),r=n.length;r--;)o.attrHandle[n[r]]=e}function ft(t,e){var n=e&&t,o=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(o)return o;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ht(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function dt(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function mt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&st(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function gt(t){return ut((function(e){return e=+e,ut((function(n,o){for(var r,i=t([],n.length,e),s=i.length;s--;)n[r=i[s]]&&(n[r]=!(o[r]=n[r]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=at.support={},i=at.isXML=function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!Y.test(e||n&&n.nodeName||"HTML")},f=at.setDocument=function(t){var e,r,s=t?t.ownerDocument||t:T;return s!=h&&9===s.nodeType&&s.documentElement?(d=(h=s).documentElement,m=!i(h),T!=h&&(r=h.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",it,!1):r.attachEvent&&r.attachEvent("onunload",it)),n.scope=ct((function(t){return d.appendChild(t).appendChild(h.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length})),n.cssSupportsSelector=ct((function(){return CSS.supports("selector(*)")&&h.querySelectorAll(":is(:jqfake)")&&!CSS.supports("selector(:is(*,:jqfake))")})),n.attributes=ct((function(t){return t.className="i",!t.getAttribute("className")})),n.getElementsByTagName=ct((function(t){return t.appendChild(h.createComment("")),!t.getElementsByTagName("*").length})),n.getElementsByClassName=K.test(h.getElementsByClassName),n.getById=ct((function(t){return d.appendChild(t).id=x,!h.getElementsByName||!h.getElementsByName(x).length})),n.getById?(o.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},o.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var n=e.getElementById(t);return n?[n]:[]}}):(o.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},o.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var n,o,r,i=e.getElementById(t);if(i){if((n=i.getAttributeNode("id"))&&n.value===t)return[i];for(r=e.getElementsByName(t),o=0;i=r[o++];)if((n=i.getAttributeNode("id"))&&n.value===t)return[i]}return[]}}),o.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,o=[],r=0,i=e.getElementsByTagName(t);if("*"===t){for(;n=i[r++];)1===n.nodeType&&o.push(n);return o}return i},o.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&m)return e.getElementsByClassName(t)},v=[],g=[],(n.qsa=K.test(h.querySelectorAll))&&(ct((function(t){var e;d.appendChild(t).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+F+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+F+"*(?:value|"+H+")"),t.querySelectorAll("[id~="+x+"-]").length||g.push("~="),(e=h.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||g.push("\\["+F+"*name"+F+"*="+F+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+x+"+*").length||g.push(".#.+[+~]"),t.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ct((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=h.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+F+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),d.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=K.test(y=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ct((function(t){n.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),v.push("!=",I)})),n.cssSupportsSelector||g.push(":has"),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),e=K.test(d.compareDocumentPosition),b=e||K.test(d.contains)?function(t,e){var n=9===t.nodeType&&t.documentElement||t,o=e&&e.parentNode;return t===o||!(!o||1!==o.nodeType||!(n.contains?n.contains(o):t.compareDocumentPosition&&16&t.compareDocumentPosition(o)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},k=e?function(t,e){if(t===e)return p=!0,0;var o=!t.compareDocumentPosition-!e.compareDocumentPosition;return o||(1&(o=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===o?t==h||t.ownerDocument==T&&b(T,t)?-1:e==h||e.ownerDocument==T&&b(T,e)?1:c?R(c,t)-R(c,e):0:4&o?-1:1)}:function(t,e){if(t===e)return p=!0,0;var n,o=0,r=t.parentNode,i=e.parentNode,s=[t],a=[e];if(!r||!i)return t==h?-1:e==h?1:r?-1:i?1:c?R(c,t)-R(c,e):0;if(r===i)return ft(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[o]===a[o];)o++;return o?ft(s[o],a[o]):s[o]==T?-1:a[o]==T?1:0},h):h},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if(f(t),n.matchesSelector&&m&&!A[e+" "]&&(!v||!v.test(e))&&(!g||!g.test(e)))try{var o=y.call(t,e);if(o||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return o}catch(t){A(e,!0)}return at(e,h,null,[t]).length>0},at.contains=function(t,e){return(t.ownerDocument||t)!=h&&f(t),b(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!=h&&f(t);var r=o.attrHandle[e.toLowerCase()],i=r&&D.call(o.attrHandle,e.toLowerCase())?r(t,e,!m):void 0;return void 0!==i?i:n.attributes||!m?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},at.escape=function(t){return(t+"").replace(ot,rt)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,o=[],r=0,i=0;if(p=!n.detectDuplicates,c=!n.sortStable&&t.slice(0),t.sort(k),p){for(;e=t[i++];)e===t[i]&&(r=o.push(i));for(;r--;)t.splice(o[r],1)}return c=null,t},r=at.getText=function(t){var e,n="",o=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=r(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[o++];)n+=r(e);return n},o=at.selectors={cacheLength:50,createPseudo:ut,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return V.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&X.test(n)&&(e=s(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=E[t+" "];return e||(e=new RegExp("(^|"+F+")"+t+"("+F+"|$)"))&&E(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(o){var r=at.attr(o,t);return null==r?"!="===e:!e||(r+="","="===e?r===n:"!="===e?r!==n:"^="===e?n&&0===r.indexOf(n):"*="===e?n&&r.indexOf(n)>-1:"$="===e?n&&r.slice(-n.length)===n:"~="===e?(" "+r.replace(W," ")+" ").indexOf(n)>-1:"|="===e&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,o,r){var i="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===o&&0===r?function(t){return!!t.parentNode}:function(e,n,l){var u,c,p,f,h,d,m=i!==s?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(i){for(;m;){for(f=e;f=f[m];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;d=m="only"===t&&!d&&"nextSibling"}return!0}if(d=[s?g.firstChild:g.lastChild],s&&y){for(b=(h=(u=(c=(p=(f=g)[x]||(f[x]={}))[f.uniqueID]||(p[f.uniqueID]={}))[t]||[])[0]===w&&u[1])&&u[2],f=h&&g.childNodes[h];f=++h&&f&&f[m]||(b=h=0)||d.pop();)if(1===f.nodeType&&++b&&f===e){c[t]=[w,h,b];break}}else if(y&&(b=h=(u=(c=(p=(f=e)[x]||(f[x]={}))[f.uniqueID]||(p[f.uniqueID]={}))[t]||[])[0]===w&&u[1]),!1===b)for(;(f=++h&&f&&f[m]||(b=h=0)||d.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++b||(y&&((c=(p=f[x]||(f[x]={}))[f.uniqueID]||(p[f.uniqueID]={}))[t]=[w,b]),f!==e)););return(b-=r)===o||b%o==0&&b/o>=0}}},PSEUDO:function(t,e){var n,r=o.pseudos[t]||o.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return r[x]?r(e):r.length>1?(n=[t,t,"",e],o.setFilters.hasOwnProperty(t.toLowerCase())?ut((function(t,n){for(var o,i=r(t,e),s=i.length;s--;)t[o=R(t,i[s])]=!(n[o]=i[s])})):function(t){return r(t,0,n)}):r}},pseudos:{not:ut((function(t){var e=[],n=[],o=a(t.replace(B,"$1"));return o[x]?ut((function(t,e,n,r){for(var i,s=o(t,null,r,[]),a=t.length;a--;)(i=s[a])&&(t[a]=!(e[a]=i))})):function(t,r,i){return e[0]=t,o(e,null,i,n),e[0]=null,!n.pop()}})),has:ut((function(t){return function(e){return at(t,e).length>0}})),contains:ut((function(t){return t=t.replace(et,nt),function(e){return(e.textContent||r(e)).indexOf(t)>-1}})),lang:ut((function(t){return U.test(t||"")||at.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=m?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===d},focus:function(t){return t===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:mt(!1),disabled:mt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!o.pseudos.empty(t)},header:function(t){return J.test(t.nodeName)},input:function(t){return Q.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:gt((function(){return[0]})),last:gt((function(t,e){return[e-1]})),eq:gt((function(t,e,n){return[n<0?n+e:n]})),even:gt((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:gt((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:gt((function(t,e,n){for(var o=n<0?n+e:n>e?e:n;--o>=0;)t.push(o);return t})),gt:gt((function(t,e,n){for(var o=n<0?n+e:n;++o<e;)t.push(o);return t}))}},o.pseudos.nth=o.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})o.pseudos[e]=ht(e);for(e in{submit:!0,reset:!0})o.pseudos[e]=dt(e);function yt(){}function bt(t){for(var e=0,n=t.length,o="";e<n;e++)o+=t[e].value;return o}function xt(t,e,n){var o=e.dir,r=e.next,i=r||o,s=n&&"parentNode"===i,a=C++;return e.first?function(e,n,r){for(;e=e[o];)if(1===e.nodeType||s)return t(e,n,r);return!1}:function(e,n,l){var u,c,p,f=[w,a];if(l){for(;e=e[o];)if((1===e.nodeType||s)&&t(e,n,l))return!0}else for(;e=e[o];)if(1===e.nodeType||s)if(c=(p=e[x]||(e[x]={}))[e.uniqueID]||(p[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[o]||e;else{if((u=c[i])&&u[0]===w&&u[1]===a)return f[2]=u[2];if(c[i]=f,f[2]=t(e,n,l))return!0}return!1}}function Tt(t){return t.length>1?function(e,n,o){for(var r=t.length;r--;)if(!t[r](e,n,o))return!1;return!0}:t[0]}function wt(t,e,n,o,r){for(var i,s=[],a=0,l=t.length,u=null!=e;a<l;a++)(i=t[a])&&(n&&!n(i,o,r)||(s.push(i),u&&e.push(a)));return s}function Ct(t,e,n,o,r,i){return o&&!o[x]&&(o=Ct(o)),r&&!r[x]&&(r=Ct(r,i)),ut((function(i,s,a,l){var u,c,p,f=[],h=[],d=s.length,m=i||function(t,e,n){for(var o=0,r=e.length;o<r;o++)at(t,e[o],n);return n}(e||"*",a.nodeType?[a]:a,[]),g=!t||!i&&e?m:wt(m,f,t,a,l),v=n?r||(i?t:d||o)?[]:s:g;if(n&&n(g,v,a,l),o)for(u=wt(v,h),o(u,[],a,l),c=u.length;c--;)(p=u[c])&&(v[h[c]]=!(g[h[c]]=p));if(i){if(r||t){if(r){for(u=[],c=v.length;c--;)(p=v[c])&&u.push(g[c]=p);r(null,v=[],u,l)}for(c=v.length;c--;)(p=v[c])&&(u=r?R(i,p):f[c])>-1&&(i[u]=!(s[u]=p))}}else v=wt(v===s?v.splice(d,v.length):v),r?r(null,s,v,l):L.apply(s,v)}))}function Et(t){for(var e,n,r,i=t.length,s=o.relative[t[0].type],a=s||o.relative[" "],l=s?1:0,c=xt((function(t){return t===e}),a,!0),p=xt((function(t){return R(e,t)>-1}),a,!0),f=[function(t,n,o){var r=!s&&(o||n!==u)||((e=n).nodeType?c(t,n,o):p(t,n,o));return e=null,r}];l<i;l++)if(n=o.relative[t[l].type])f=[xt(Tt(f),n)];else{if((n=o.filter[t[l].type].apply(null,t[l].matches))[x]){for(r=++l;r<i&&!o.relative[t[r].type];r++);return Ct(l>1&&Tt(f),l>1&&bt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(B,"$1"),n,l<r&&Et(t.slice(l,r)),r<i&&Et(t=t.slice(r)),r<i&&bt(t))}f.push(n)}return Tt(f)}return yt.prototype=o.filters=o.pseudos,o.setFilters=new yt,s=at.tokenize=function(t,e){var n,r,i,s,a,l,u,c=_[t+" "];if(c)return e?0:c.slice(0);for(a=t,l=[],u=o.preFilter;a;){for(s in n&&!(r=$.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(i=[])),n=!1,(r=G.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(B," ")}),a=a.slice(n.length)),o.filter)!(r=V[s].exec(a))||u[s]&&!(r=u[s](r))||(n=r.shift(),i.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return e?a.length:a?at.error(t):_(t,l).slice(0)},a=at.compile=function(t,e){var n,r=[],i=[],a=S[t+" "];if(!a){for(e||(e=s(t)),n=e.length;n--;)(a=Et(e[n]))[x]?r.push(a):i.push(a);a=S(t,function(t,e){var n=e.length>0,r=t.length>0,i=function(i,s,a,l,c){var p,d,g,v=0,y="0",b=i&&[],x=[],T=u,C=i||r&&o.find.TAG("*",c),E=w+=null==T?1:Math.random()||.1,_=C.length;for(c&&(u=s==h||s||c);y!==_&&null!=(p=C[y]);y++){if(r&&p){for(d=0,s||p.ownerDocument==h||(f(p),a=!m);g=t[d++];)if(g(p,s||h,a)){l.push(p);break}c&&(w=E)}n&&((p=!g&&p)&&v--,i&&b.push(p))}if(v+=y,n&&y!==v){for(d=0;g=e[d++];)g(b,x,s,a);if(i){if(v>0)for(;y--;)b[y]||x[y]||(x[y]=N.call(l));x=wt(x)}L.apply(l,x),c&&!i&&x.length>0&&v+e.length>1&&at.uniqueSort(l)}return c&&(w=E,u=T),b};return n?ut(i):i}(i,r)),a.selector=t}return a},l=at.select=function(t,e,n,r){var i,l,u,c,p,f="function"==typeof t&&t,h=!r&&s(t=f.selector||t);if(n=n||[],1===h.length){if((l=h[0]=h[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===e.nodeType&&m&&o.relative[l[1].type]){if(!(e=(o.find.ID(u.matches[0].replace(et,nt),e)||[])[0]))return n;f&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(i=V.needsContext.test(t)?0:l.length;i--&&(u=l[i],!o.relative[c=u.type]);)if((p=o.find[c])&&(r=p(u.matches[0].replace(et,nt),tt.test(l[0].type)&&vt(e.parentNode)||e))){if(l.splice(i,1),!(t=r.length&&bt(l)))return L.apply(n,r),n;break}}return(f||a(t,h))(r,e,!m,n,!e||tt.test(t)&&vt(e.parentNode)||e),n},n.sortStable=x.split("").sort(k).join("")===x,n.detectDuplicates=!!p,f(),n.sortDetached=ct((function(t){return 1&t.compareDocumentPosition(h.createElement("fieldset"))})),ct((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||pt("type|href|height|width",(function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),n.attributes&&ct((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||pt("value",(function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ct((function(t){return null==t.getAttribute("disabled")}))||pt(H,(function(t,e,n){var o;if(!n)return!0===t[e]?e.toLowerCase():(o=t.getAttributeNode(e))&&o.specified?o.value:null})),at}(o);E.find=S,E.expr=S.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=S.uniqueSort,E.text=S.getText,E.isXMLDoc=S.isXML,E.contains=S.contains,E.escapeSelector=S.escape;var A=function(t,e,n){for(var o=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&E(t).is(n))break;o.push(t)}return o},k=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},D=E.expr.match.needsContext;function j(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(t,e,n){return v(e)?E.grep(t,(function(t,o){return!!e.call(t,o,t)!==n})):e.nodeType?E.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?E.grep(t,(function(t){return c.call(e,t)>-1!==n})):E.filter(e,t,n)}E.filter=function(t,e,n){var o=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===o.nodeType?E.find.matchesSelector(o,t)?[o]:[]:E.find.matches(t,E.grep(e,(function(t){return 1===t.nodeType})))},E.fn.extend({find:function(t){var e,n,o=this.length,r=this;if("string"!=typeof t)return this.pushStack(E(t).filter((function(){for(e=0;e<o;e++)if(E.contains(r[e],this))return!0})));for(n=this.pushStack([]),e=0;e<o;e++)E.find(t,r[e],n);return o>1?E.uniqueSort(n):n},filter:function(t){return this.pushStack(O(this,t||[],!1))},not:function(t){return this.pushStack(O(this,t||[],!0))},is:function(t){return!!O(this,"string"==typeof t&&D.test(t)?E(t):t||[],!1).length}});var L,q=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(t,e,n){var o,r;if(!t)return this;if(n=n||L,"string"==typeof t){if(!(o="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:q.exec(t))||!o[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(o[1]){if(e=e instanceof E?e[0]:e,E.merge(this,E.parseHTML(o[1],e&&e.nodeType?e.ownerDocument||e:b,!0)),N.test(o[1])&&E.isPlainObject(e))for(o in e)v(this[o])?this[o](e[o]):this.attr(o,e[o]);return this}return(r=b.getElementById(o[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==n.ready?n.ready(t):t(E):E.makeArray(t,this)}).prototype=E.fn,L=E(b);var R=/^(?:parents|prev(?:Until|All))/,H={children:!0,contents:!0,next:!0,prev:!0};function F(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}E.fn.extend({has:function(t){var e=E(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(E.contains(this,e[t]))return!0}))},closest:function(t,e){var n,o=0,r=this.length,i=[],s="string"!=typeof t&&E(t);if(!D.test(t))for(;o<r;o++)for(n=this[o];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,t))){i.push(n);break}return this.pushStack(i.length>1?E.uniqueSort(i):i)},index:function(t){return t?"string"==typeof t?c.call(E(t),this[0]):c.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),E.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return A(t,"parentNode")},parentsUntil:function(t,e,n){return A(t,"parentNode",n)},next:function(t){return F(t,"nextSibling")},prev:function(t){return F(t,"previousSibling")},nextAll:function(t){return A(t,"nextSibling")},prevAll:function(t){return A(t,"previousSibling")},nextUntil:function(t,e,n){return A(t,"nextSibling",n)},prevUntil:function(t,e,n){return A(t,"previousSibling",n)},siblings:function(t){return k((t.parentNode||{}).firstChild,t)},children:function(t){return k(t.firstChild)},contents:function(t){return null!=t.contentDocument&&s(t.contentDocument)?t.contentDocument:(j(t,"template")&&(t=t.content||t),E.merge([],t.childNodes))}},(function(t,e){E.fn[t]=function(n,o){var r=E.map(this,e,n);return"Until"!==t.slice(-5)&&(o=n),o&&"string"==typeof o&&(r=E.filter(o,r)),this.length>1&&(H[t]||E.uniqueSort(r),R.test(t)&&r.reverse()),this.pushStack(r)}}));var M=/[^\x20\t\r\n\f]+/g;function P(t){return t}function I(t){throw t}function W(t,e,n,o){var r;try{t&&v(r=t.promise)?r.call(t).done(e).fail(n):t&&v(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(o))}catch(t){n.apply(void 0,[t])}}E.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return E.each(t.match(M)||[],(function(t,n){e[n]=!0})),e}(t):E.extend({},t);var e,n,o,r,i=[],s=[],a=-1,l=function(){for(r=r||t.once,o=e=!0;s.length;a=-1)for(n=s.shift();++a<i.length;)!1===i[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=i.length,n=!1);t.memory||(n=!1),e=!1,r&&(i=n?[]:"")},u={add:function(){return i&&(n&&!e&&(a=i.length-1,s.push(n)),function e(n){E.each(n,(function(n,o){v(o)?t.unique&&u.has(o)||i.push(o):o&&o.length&&"string"!==w(o)&&e(o)}))}(arguments),n&&!e&&l()),this},remove:function(){return E.each(arguments,(function(t,e){for(var n;(n=E.inArray(e,i,n))>-1;)i.splice(n,1),n<=a&&a--})),this},has:function(t){return t?E.inArray(t,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return r=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return r=s=[],n||e||(i=n=""),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!o}};return u},E.extend({Deferred:function(t){var e=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return E.Deferred((function(n){E.each(e,(function(e,o){var r=v(t[o[4]])&&t[o[4]];i[o[1]]((function(){var t=r&&r.apply(this,arguments);t&&v(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this,r?[t]:arguments)}))})),t=null})).promise()},then:function(t,n,r){var i=0;function s(t,e,n,r){return function(){var a=this,l=arguments,u=function(){var o,u;if(!(t<i)){if((o=n.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");u=o&&("object"==typeof o||"function"==typeof o)&&o.then,v(u)?r?u.call(o,s(i,e,P,r),s(i,e,I,r)):(i++,u.call(o,s(i,e,P,r),s(i,e,I,r),s(i,e,P,e.notifyWith))):(n!==P&&(a=void 0,l=[o]),(r||e.resolveWith)(a,l))}},c=r?u:function(){try{u()}catch(o){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(o,c.stackTrace),t+1>=i&&(n!==I&&(a=void 0,l=[o]),e.rejectWith(a,l))}};t?c():(E.Deferred.getStackHook&&(c.stackTrace=E.Deferred.getStackHook()),o.setTimeout(c))}}return E.Deferred((function(o){e[0][3].add(s(0,o,v(r)?r:P,o.notifyWith)),e[1][3].add(s(0,o,v(t)?t:P)),e[2][3].add(s(0,o,v(n)?n:I))})).promise()},promise:function(t){return null!=t?E.extend(t,r):r}},i={};return E.each(e,(function(t,o){var s=o[2],a=o[5];r[o[1]]=s.add,a&&s.add((function(){n=a}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),s.add(o[3].fire),i[o[0]]=function(){return i[o[0]+"With"](this===i?void 0:this,arguments),this},i[o[0]+"With"]=s.fireWith})),r.promise(i),t&&t.call(i,i),i},when:function(t){var e=arguments.length,n=e,o=Array(n),r=a.call(arguments),i=E.Deferred(),s=function(t){return function(n){o[t]=this,r[t]=arguments.length>1?a.call(arguments):n,--e||i.resolveWith(o,r)}};if(e<=1&&(W(t,i.done(s(n)).resolve,i.reject,!e),"pending"===i.state()||v(r[n]&&r[n].then)))return i.then();for(;n--;)W(r[n],s(n),i.reject);return i.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(t,e){o.console&&o.console.warn&&t&&B.test(t.name)&&o.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},E.readyException=function(t){o.setTimeout((function(){throw t}))};var $=E.Deferred();function G(){b.removeEventListener("DOMContentLoaded",G),o.removeEventListener("load",G),E.ready()}E.fn.ready=function(t){return $.then(t).catch((function(t){E.readyException(t)})),this},E.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==t&&--E.readyWait>0||$.resolveWith(b,[E]))}}),E.ready.then=$.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?o.setTimeout(E.ready):(b.addEventListener("DOMContentLoaded",G),o.addEventListener("load",G));var z=function(t,e,n,o,r,i,s){var a=0,l=t.length,u=null==n;if("object"===w(n))for(a in r=!0,n)z(t,e,a,n[a],!0,i,s);else if(void 0!==o&&(r=!0,v(o)||(s=!0),u&&(s?(e.call(t,o),e=null):(u=e,e=function(t,e,n){return u.call(E(t),n)})),e))for(;a<l;a++)e(t[a],n,s?o:o.call(t[a],a,e(t[a],n)));return r?t:u?e.call(t):l?e(t[0],n):i},X=/^-ms-/,U=/-([a-z])/g;function V(t,e){return e.toUpperCase()}function Y(t){return t.replace(X,"ms-").replace(U,V)}var Q=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function J(){this.expando=E.expando+J.uid++}J.uid=1,J.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Q(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var o,r=this.cache(t);if("string"==typeof e)r[Y(e)]=n;else for(o in e)r[Y(o)]=e[o];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][Y(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,o=t[this.expando];if(void 0!==o){if(void 0!==e){n=(e=Array.isArray(e)?e.map(Y):(e=Y(e))in o?[e]:e.match(M)||[]).length;for(;n--;)delete o[e[n]]}(void 0===e||E.isEmptyObject(o))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!E.isEmptyObject(e)}};var K=new J,Z=new J,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var o;if(void 0===n&&1===t.nodeType)if(o="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(o))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}Z.set(t,e,n)}else n=void 0;return n}E.extend({hasData:function(t){return Z.hasData(t)||K.hasData(t)},data:function(t,e,n){return Z.access(t,e,n)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,n){return K.access(t,e,n)},_removeData:function(t,e){K.remove(t,e)}}),E.fn.extend({data:function(t,e){var n,o,r,i=this[0],s=i&&i.attributes;if(void 0===t){if(this.length&&(r=Z.get(i),1===i.nodeType&&!K.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(o=s[n].name).indexOf("data-")&&(o=Y(o.slice(5)),nt(i,o,r[o]));K.set(i,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each((function(){Z.set(this,t)})):z(this,(function(e){var n;if(i&&void 0===e)return void 0!==(n=Z.get(i,t))||void 0!==(n=nt(i,t))?n:void 0;this.each((function(){Z.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){Z.remove(this,t)}))}}),E.extend({queue:function(t,e,n){var o;if(t)return e=(e||"fx")+"queue",o=K.get(t,e),n&&(!o||Array.isArray(n)?o=K.access(t,e,E.makeArray(n)):o.push(n)),o||[]},dequeue:function(t,e){e=e||"fx";var n=E.queue(t,e),o=n.length,r=n.shift(),i=E._queueHooks(t,e);"inprogress"===r&&(r=n.shift(),o--),r&&("fx"===e&&n.unshift("inprogress"),delete i.stop,r.call(t,(function(){E.dequeue(t,e)}),i)),!o&&i&&i.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return K.get(t,n)||K.access(t,n,{empty:E.Callbacks("once memory").add((function(){K.remove(t,[e+"queue",n])}))})}}),E.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?E.queue(this[0],t):void 0===e?this:this.each((function(){var n=E.queue(this,t,e);E._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&E.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){E.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,o=1,r=E.Deferred(),i=this,s=this.length,a=function(){--o||r.resolveWith(i,[i])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=K.get(i[s],t+"queueHooks"))&&n.empty&&(o++,n.empty.add(a));return a(),r.promise(e)}});var ot=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,rt=new RegExp("^(?:([+-])=|)("+ot+")([a-z%]*)$","i"),it=["Top","Right","Bottom","Left"],st=b.documentElement,at=function(t){return E.contains(t.ownerDocument,t)},lt={composed:!0};st.getRootNode&&(at=function(t){return E.contains(t.ownerDocument,t)||t.getRootNode(lt)===t.ownerDocument});var ut=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at(t)&&"none"===E.css(t,"display")};function ct(t,e,n,o){var r,i,s=20,a=o?function(){return o.cur()}:function(){return E.css(t,e,"")},l=a(),u=n&&n[3]||(E.cssNumber[e]?"":"px"),c=t.nodeType&&(E.cssNumber[e]||"px"!==u&&+l)&&rt.exec(E.css(t,e));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;s--;)E.style(t,e,c+u),(1-i)*(1-(i=a()/l||.5))<=0&&(s=0),c/=i;c*=2,E.style(t,e,c+u),n=n||[]}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],o&&(o.unit=u,o.start=c,o.end=r)),r}var pt={};function ft(t){var e,n=t.ownerDocument,o=t.nodeName,r=pt[o];return r||(e=n.body.appendChild(n.createElement(o)),r=E.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),pt[o]=r,r)}function ht(t,e){for(var n,o,r=[],i=0,s=t.length;i<s;i++)(o=t[i]).style&&(n=o.style.display,e?("none"===n&&(r[i]=K.get(o,"display")||null,r[i]||(o.style.display="")),""===o.style.display&&ut(o)&&(r[i]=ft(o))):"none"!==n&&(r[i]="none",K.set(o,"display",n)));for(i=0;i<s;i++)null!=r[i]&&(t[i].style.display=r[i]);return t}E.fn.extend({show:function(){return ht(this,!0)},hide:function(){return ht(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){ut(this)?E(this).show():E(this).hide()}))}});var dt,mt,gt=/^(?:checkbox|radio)$/i,vt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,yt=/^$|^module$|\/(?:java|ecma)script/i;dt=b.createDocumentFragment().appendChild(b.createElement("div")),(mt=b.createElement("input")).setAttribute("type","radio"),mt.setAttribute("checked","checked"),mt.setAttribute("name","t"),dt.appendChild(mt),g.checkClone=dt.cloneNode(!0).cloneNode(!0).lastChild.checked,dt.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!dt.cloneNode(!0).lastChild.defaultValue,dt.innerHTML="<option></option>",g.option=!!dt.lastChild;var bt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function xt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&j(t,e)?E.merge([t],n):n}function Tt(t,e){for(var n=0,o=t.length;n<o;n++)K.set(t[n],"globalEval",!e||K.get(e[n],"globalEval"))}bt.tbody=bt.tfoot=bt.colgroup=bt.caption=bt.thead,bt.th=bt.td,g.option||(bt.optgroup=bt.option=[1,"<select multiple='multiple'>","</select>"]);var wt=/<|&#?\w+;/;function Ct(t,e,n,o,r){for(var i,s,a,l,u,c,p=e.createDocumentFragment(),f=[],h=0,d=t.length;h<d;h++)if((i=t[h])||0===i)if("object"===w(i))E.merge(f,i.nodeType?[i]:i);else if(wt.test(i)){for(s=s||p.appendChild(e.createElement("div")),a=(vt.exec(i)||["",""])[1].toLowerCase(),l=bt[a]||bt._default,s.innerHTML=l[1]+E.htmlPrefilter(i)+l[2],c=l[0];c--;)s=s.lastChild;E.merge(f,s.childNodes),(s=p.firstChild).textContent=""}else f.push(e.createTextNode(i));for(p.textContent="",h=0;i=f[h++];)if(o&&E.inArray(i,o)>-1)r&&r.push(i);else if(u=at(i),s=xt(p.appendChild(i),"script"),u&&Tt(s),n)for(c=0;i=s[c++];)yt.test(i.type||"")&&n.push(i);return p}var Et=/^([^.]*)(?:\.(.+)|)/;function _t(){return!0}function St(){return!1}function At(t,e){return t===function(){try{return b.activeElement}catch(t){}}()==("focus"===e)}function kt(t,e,n,o,r,i){var s,a;if("object"==typeof e){for(a in"string"!=typeof n&&(o=o||n,n=void 0),e)kt(t,a,n,o,e[a],i);return t}if(null==o&&null==r?(r=n,o=n=void 0):null==r&&("string"==typeof n?(r=o,o=void 0):(r=o,o=n,n=void 0)),!1===r)r=St;else if(!r)return t;return 1===i&&(s=r,r=function(t){return E().off(t),s.apply(this,arguments)},r.guid=s.guid||(s.guid=E.guid++)),t.each((function(){E.event.add(this,e,r,o,n)}))}function Dt(t,e,n){n?(K.set(t,e,!1),E.event.add(t,e,{namespace:!1,handler:function(t){var o,r,i=K.get(this,e);if(1&t.isTrigger&&this[e]){if(i.length)(E.event.special[e]||{}).delegateType&&t.stopPropagation();else if(i=a.call(arguments),K.set(this,e,i),o=n(this,e),this[e](),i!==(r=K.get(this,e))||o?K.set(this,e,!1):r={},i!==r)return t.stopImmediatePropagation(),t.preventDefault(),r&&r.value}else i.length&&(K.set(this,e,{value:E.event.trigger(E.extend(i[0],E.Event.prototype),i.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===K.get(t,e)&&E.event.add(t,e,_t)}E.event={global:{},add:function(t,e,n,o,r){var i,s,a,l,u,c,p,f,h,d,m,g=K.get(t);if(Q(t))for(n.handler&&(n=(i=n).handler,r=i.selector),r&&E.find.matchesSelector(st,r),n.guid||(n.guid=E.guid++),(l=g.events)||(l=g.events=Object.create(null)),(s=g.handle)||(s=g.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(M)||[""]).length;u--;)h=m=(a=Et.exec(e[u])||[])[1],d=(a[2]||"").split(".").sort(),h&&(p=E.event.special[h]||{},h=(r?p.delegateType:p.bindType)||h,p=E.event.special[h]||{},c=E.extend({type:h,origType:m,data:o,handler:n,guid:n.guid,selector:r,needsContext:r&&E.expr.match.needsContext.test(r),namespace:d.join(".")},i),(f=l[h])||((f=l[h]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(t,o,d,s)||t.addEventListener&&t.addEventListener(h,s)),p.add&&(p.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,c):f.push(c),E.event.global[h]=!0)},remove:function(t,e,n,o,r){var i,s,a,l,u,c,p,f,h,d,m,g=K.hasData(t)&&K.get(t);if(g&&(l=g.events)){for(u=(e=(e||"").match(M)||[""]).length;u--;)if(h=m=(a=Et.exec(e[u])||[])[1],d=(a[2]||"").split(".").sort(),h){for(p=E.event.special[h]||{},f=l[h=(o?p.delegateType:p.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=f.length;i--;)c=f[i],!r&&m!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||o&&o!==c.selector&&("**"!==o||!c.selector)||(f.splice(i,1),c.selector&&f.delegateCount--,p.remove&&p.remove.call(t,c));s&&!f.length&&(p.teardown&&!1!==p.teardown.call(t,d,g.handle)||E.removeEvent(t,h,g.handle),delete l[h])}else for(h in l)E.event.remove(t,h+e[u],n,o,!0);E.isEmptyObject(l)&&K.remove(t,"handle events")}},dispatch:function(t){var e,n,o,r,i,s,a=new Array(arguments.length),l=E.event.fix(t),u=(K.get(this,"events")||Object.create(null))[l.type]||[],c=E.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(s=E.event.handlers.call(this,l,u),e=0;(r=s[e++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(i=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==i.namespace&&!l.rnamespace.test(i.namespace)||(l.handleObj=i,l.data=i.data,void 0!==(o=((E.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,a))&&!1===(l.result=o)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(t,e){var n,o,r,i,s,a=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||!0!==u.disabled)){for(i=[],s={},n=0;n<l;n++)void 0===s[r=(o=e[n]).selector+" "]&&(s[r]=o.needsContext?E(r,this).index(u)>-1:E.find(r,this,null,[u]).length),s[r]&&i.push(o);i.length&&a.push({elem:u,handlers:i})}return u=this,l<e.length&&a.push({elem:u,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[E.expando]?t:new E.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return gt.test(e.type)&&e.click&&j(e,"input")&&Dt(e,"click",_t),!1},trigger:function(t){var e=this||t;return gt.test(e.type)&&e.click&&j(e,"input")&&Dt(e,"click"),!0},_default:function(t){var e=t.target;return gt.test(e.type)&&e.click&&j(e,"input")&&K.get(e,"click")||j(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},E.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},E.Event=function(t,e){if(!(this instanceof E.Event))return new E.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?_t:St,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&E.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:St,isPropagationStopped:St,isImmediatePropagationStopped:St,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=_t,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=_t,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=_t,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},(function(t,e){E.event.special[t]={setup:function(){return Dt(this,t,At),!1},trigger:function(){return Dt(this,t),!0},_default:function(e){return K.get(e.target,t)},delegateType:e}})),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){E.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,o=this,r=t.relatedTarget,i=t.handleObj;return r&&(r===o||E.contains(o,r))||(t.type=i.origType,n=i.handler.apply(this,arguments),t.type=e),n}}})),E.fn.extend({on:function(t,e,n,o){return kt(this,t,e,n,o)},one:function(t,e,n,o){return kt(this,t,e,n,o,1)},off:function(t,e,n){var o,r;if(t&&t.preventDefault&&t.handleObj)return o=t.handleObj,E(t.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=St),this.each((function(){E.event.remove(this,t,n,e)}))}});var jt=/<script|<style|<link/i,Nt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ot=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Lt(t,e){return j(t,"table")&&j(11!==e.nodeType?e:e.firstChild,"tr")&&E(t).children("tbody")[0]||t}function qt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Rt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Ht(t,e){var n,o,r,i,s,a;if(1===e.nodeType){if(K.hasData(t)&&(a=K.get(t).events))for(r in K.remove(e,"handle events"),a)for(n=0,o=a[r].length;n<o;n++)E.event.add(e,r,a[r][n]);Z.hasData(t)&&(i=Z.access(t),s=E.extend({},i),Z.set(e,s))}}function Ft(t,e){var n=e.nodeName.toLowerCase();"input"===n&&gt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Mt(t,e,n,o){e=l(e);var r,i,s,a,u,c,p=0,f=t.length,h=f-1,d=e[0],m=v(d);if(m||f>1&&"string"==typeof d&&!g.checkClone&&Nt.test(d))return t.each((function(r){var i=t.eq(r);m&&(e[0]=d.call(this,r,i.html())),Mt(i,e,n,o)}));if(f&&(i=(r=Ct(e,t[0].ownerDocument,!1,t,o)).firstChild,1===r.childNodes.length&&(r=i),i||o)){for(a=(s=E.map(xt(r,"script"),qt)).length;p<f;p++)u=r,p!==h&&(u=E.clone(u,!0,!0),a&&E.merge(s,xt(u,"script"))),n.call(t[p],u,p);if(a)for(c=s[s.length-1].ownerDocument,E.map(s,Rt),p=0;p<a;p++)u=s[p],yt.test(u.type||"")&&!K.access(u,"globalEval")&&E.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?E._evalUrl&&!u.noModule&&E._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):T(u.textContent.replace(Ot,""),u,c))}return t}function Pt(t,e,n){for(var o,r=e?E.filter(e,t):t,i=0;null!=(o=r[i]);i++)n||1!==o.nodeType||E.cleanData(xt(o)),o.parentNode&&(n&&at(o)&&Tt(xt(o,"script")),o.parentNode.removeChild(o));return t}E.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var o,r,i,s,a=t.cloneNode(!0),l=at(t);if(!(g.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||E.isXMLDoc(t)))for(s=xt(a),o=0,r=(i=xt(t)).length;o<r;o++)Ft(i[o],s[o]);if(e)if(n)for(i=i||xt(t),s=s||xt(a),o=0,r=i.length;o<r;o++)Ht(i[o],s[o]);else Ht(t,a);return(s=xt(a,"script")).length>0&&Tt(s,!l&&xt(t,"script")),a},cleanData:function(t){for(var e,n,o,r=E.event.special,i=0;void 0!==(n=t[i]);i++)if(Q(n)){if(e=n[K.expando]){if(e.events)for(o in e.events)r[o]?E.event.remove(n,o):E.removeEvent(n,o,e.handle);n[K.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(t){return Pt(this,t,!0)},remove:function(t){return Pt(this,t)},text:function(t){return z(this,(function(t){return void 0===t?E.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Mt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Lt(this,t).appendChild(t)}))},prepend:function(){return Mt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Lt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Mt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Mt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(E.cleanData(xt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return E.clone(this,t,e)}))},html:function(t){return z(this,(function(t){var e=this[0]||{},n=0,o=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!jt.test(t)&&!bt[(vt.exec(t)||["",""])[1].toLowerCase()]){t=E.htmlPrefilter(t);try{for(;n<o;n++)1===(e=this[n]||{}).nodeType&&(E.cleanData(xt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Mt(this,arguments,(function(e){var n=this.parentNode;E.inArray(this,t)<0&&(E.cleanData(xt(this)),n&&n.replaceChild(e,this))}),t)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){E.fn[t]=function(t){for(var n,o=[],r=E(t),i=r.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),E(r[s])[e](n),u.apply(o,n.get());return this.pushStack(o)}}));var It=new RegExp("^("+ot+")(?!px)[a-z%]+$","i"),Wt=/^--/,Bt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=o),e.getComputedStyle(t)},$t=function(t,e,n){var o,r,i={};for(r in e)i[r]=t.style[r],t.style[r]=e[r];for(r in o=n.call(t),e)t.style[r]=i[r];return o},Gt=new RegExp(it.join("|"),"i"),zt="[\\x20\\t\\r\\n\\f]",Xt=new RegExp("^"+zt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+zt+"+$","g");function Ut(t,e,n){var o,r,i,s,a=Wt.test(e),l=t.style;return(n=n||Bt(t))&&(s=n.getPropertyValue(e)||n[e],a&&s&&(s=s.replace(Xt,"$1")||void 0),""!==s||at(t)||(s=E.style(t,e)),!g.pixelBoxStyles()&&It.test(s)&&Gt.test(e)&&(o=l.width,r=l.minWidth,i=l.maxWidth,l.minWidth=l.maxWidth=l.width=s,s=n.width,l.width=o,l.minWidth=r,l.maxWidth=i)),void 0!==s?s+"":s}function Vt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",st.appendChild(u).appendChild(c);var t=o.getComputedStyle(c);n="1%"!==t.top,l=12===e(t.marginLeft),c.style.right="60%",s=36===e(t.right),r=36===e(t.width),c.style.position="absolute",i=12===e(c.offsetWidth/3),st.removeChild(u),c=null}}function e(t){return Math.round(parseFloat(t))}var n,r,i,s,a,l,u=b.createElement("div"),c=b.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===c.style.backgroundClip,E.extend(g,{boxSizingReliable:function(){return t(),r},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),i},reliableTrDimensions:function(){var t,e,n,r;return null==a&&(t=b.createElement("table"),e=b.createElement("tr"),n=b.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="border:1px solid",e.style.height="1px",n.style.height="9px",n.style.display="block",st.appendChild(t).appendChild(e).appendChild(n),r=o.getComputedStyle(e),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===e.offsetHeight,st.removeChild(t)),a}}))}();var Yt=["Webkit","Moz","ms"],Qt=b.createElement("div").style,Jt={};function Kt(t){return E.cssProps[t]||Jt[t]||(t in Qt?t:Jt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Yt.length;n--;)if((t=Yt[n]+e)in Qt)return t}(t)||t)}var Zt=/^(none|table(?!-c[ea]).+)/,te={position:"absolute",visibility:"hidden",display:"block"},ee={letterSpacing:"0",fontWeight:"400"};function ne(t,e,n){var o=rt.exec(e);return o?Math.max(0,o[2]-(n||0))+(o[3]||"px"):e}function oe(t,e,n,o,r,i){var s="width"===e?1:0,a=0,l=0;if(n===(o?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=E.css(t,n+it[s],!0,r)),o?("content"===n&&(l-=E.css(t,"padding"+it[s],!0,r)),"margin"!==n&&(l-=E.css(t,"border"+it[s]+"Width",!0,r))):(l+=E.css(t,"padding"+it[s],!0,r),"padding"!==n?l+=E.css(t,"border"+it[s]+"Width",!0,r):a+=E.css(t,"border"+it[s]+"Width",!0,r));return!o&&i>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-i-l-a-.5))||0),l}function re(t,e,n){var o=Bt(t),r=(!g.boxSizingReliable()||n)&&"border-box"===E.css(t,"boxSizing",!1,o),i=r,s=Ut(t,e,o),a="offset"+e[0].toUpperCase()+e.slice(1);if(It.test(s)){if(!n)return s;s="auto"}return(!g.boxSizingReliable()&&r||!g.reliableTrDimensions()&&j(t,"tr")||"auto"===s||!parseFloat(s)&&"inline"===E.css(t,"display",!1,o))&&t.getClientRects().length&&(r="border-box"===E.css(t,"boxSizing",!1,o),(i=a in t)&&(s=t[a])),(s=parseFloat(s)||0)+oe(t,e,n||(r?"border":"content"),i,o,s)+"px"}function ie(t,e,n,o,r){return new ie.prototype.init(t,e,n,o,r)}E.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Ut(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,o){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,i,s,a=Y(e),l=Wt.test(e),u=t.style;if(l||(e=Kt(a)),s=E.cssHooks[e]||E.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(t,!1,o))?r:u[e];"string"==(i=typeof n)&&(r=rt.exec(n))&&r[1]&&(n=ct(t,e,r),i="number"),null!=n&&n==n&&("number"!==i||l||(n+=r&&r[3]||(E.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,o))||(l?u.setProperty(e,n):u[e]=n))}},css:function(t,e,n,o){var r,i,s,a=Y(e);return Wt.test(e)||(e=Kt(a)),(s=E.cssHooks[e]||E.cssHooks[a])&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=Ut(t,e,o)),"normal"===r&&e in ee&&(r=ee[e]),""===n||n?(i=parseFloat(r),!0===n||isFinite(i)?i||0:r):r}}),E.each(["height","width"],(function(t,e){E.cssHooks[e]={get:function(t,n,o){if(n)return!Zt.test(E.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?re(t,e,o):$t(t,te,(function(){return re(t,e,o)}))},set:function(t,n,o){var r,i=Bt(t),s=!g.scrollboxSize()&&"absolute"===i.position,a=(s||o)&&"border-box"===E.css(t,"boxSizing",!1,i),l=o?oe(t,e,o,a,i):0;return a&&s&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(i[e])-oe(t,e,"border",!1,i)-.5)),l&&(r=rt.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=E.css(t,e)),ne(0,n,l)}}})),E.cssHooks.marginLeft=Vt(g.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Ut(t,"marginLeft"))||t.getBoundingClientRect().left-$t(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),E.each({margin:"",padding:"",border:"Width"},(function(t,e){E.cssHooks[t+e]={expand:function(n){for(var o=0,r={},i="string"==typeof n?n.split(" "):[n];o<4;o++)r[t+it[o]+e]=i[o]||i[o-2]||i[0];return r}},"margin"!==t&&(E.cssHooks[t+e].set=ne)})),E.fn.extend({css:function(t,e){return z(this,(function(t,e,n){var o,r,i={},s=0;if(Array.isArray(e)){for(o=Bt(t),r=e.length;s<r;s++)i[e[s]]=E.css(t,e[s],!1,o);return i}return void 0!==n?E.style(t,e,n):E.css(t,e)}),t,e,arguments.length>1)}}),E.Tween=ie,ie.prototype={constructor:ie,init:function(t,e,n,o,r,i){this.elem=t,this.prop=n,this.easing=r||E.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=o,this.unit=i||(E.cssNumber[n]?"":"px")},cur:function(){var t=ie.propHooks[this.prop];return t&&t.get?t.get(this):ie.propHooks._default.get(this)},run:function(t){var e,n=ie.propHooks[this.prop];return this.options.duration?this.pos=e=E.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ie.propHooks._default.set(this),this}},ie.prototype.init.prototype=ie.prototype,ie.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=E.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){E.fx.step[t.prop]?E.fx.step[t.prop](t):1!==t.elem.nodeType||!E.cssHooks[t.prop]&&null==t.elem.style[Kt(t.prop)]?t.elem[t.prop]=t.now:E.style(t.elem,t.prop,t.now+t.unit)}}},ie.propHooks.scrollTop=ie.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},E.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},E.fx=ie.prototype.init,E.fx.step={};var se,ae,le=/^(?:toggle|show|hide)$/,ue=/queueHooks$/;function ce(){ae&&(!1===b.hidden&&o.requestAnimationFrame?o.requestAnimationFrame(ce):o.setTimeout(ce,E.fx.interval),E.fx.tick())}function pe(){return o.setTimeout((function(){se=void 0})),se=Date.now()}function fe(t,e){var n,o=0,r={height:t};for(e=e?1:0;o<4;o+=2-e)r["margin"+(n=it[o])]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function he(t,e,n){for(var o,r=(de.tweeners[e]||[]).concat(de.tweeners["*"]),i=0,s=r.length;i<s;i++)if(o=r[i].call(n,e,t))return o}function de(t,e,n){var o,r,i=0,s=de.prefilters.length,a=E.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var e=se||pe(),n=Math.max(0,u.startTime+u.duration-e),o=1-(n/u.duration||0),i=0,s=u.tweens.length;i<s;i++)u.tweens[i].run(o);return a.notifyWith(t,[u,o,n]),o<1&&s?n:(s||a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u]),!1)},u=a.promise({elem:t,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:e,originalOptions:n,startTime:se||pe(),duration:n.duration,tweens:[],createTween:function(e,n){var o=E.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(o),o},stop:function(e){var n=0,o=e?u.tweens.length:0;if(r)return this;for(r=!0;n<o;n++)u.tweens[n].run(1);return e?(a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u,e])):a.rejectWith(t,[u,e]),this}}),c=u.props;for(function(t,e){var n,o,r,i,s;for(n in t)if(r=e[o=Y(n)],i=t[n],Array.isArray(i)&&(r=i[1],i=t[n]=i[0]),n!==o&&(t[o]=i,delete t[n]),(s=E.cssHooks[o])&&"expand"in s)for(n in i=s.expand(i),delete t[o],i)n in t||(t[n]=i[n],e[n]=r);else e[o]=r}(c,u.opts.specialEasing);i<s;i++)if(o=de.prefilters[i].call(u,t,c,u.opts))return v(o.stop)&&(E._queueHooks(u.elem,u.opts.queue).stop=o.stop.bind(o)),o;return E.map(c,he,u),v(u.opts.start)&&u.opts.start.call(t,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),E.fx.timer(E.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u}E.Animation=E.extend(de,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ct(n.elem,t,rt.exec(e),n),n}]},tweener:function(t,e){v(t)?(e=t,t=["*"]):t=t.match(M);for(var n,o=0,r=t.length;o<r;o++)n=t[o],de.tweeners[n]=de.tweeners[n]||[],de.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var o,r,i,s,a,l,u,c,p="width"in e||"height"in e,f=this,h={},d=t.style,m=t.nodeType&&ut(t),g=K.get(t,"fxshow");for(o in n.queue||(null==(s=E._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,f.always((function(){f.always((function(){s.unqueued--,E.queue(t,"fx").length||s.empty.fire()}))}))),e)if(r=e[o],le.test(r)){if(delete e[o],i=i||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[o])continue;m=!0}h[o]=g&&g[o]||E.style(t,o)}if((l=!E.isEmptyObject(e))||!E.isEmptyObject(h))for(o in p&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(u=g&&g.display)&&(u=K.get(t,"display")),"none"===(c=E.css(t,"display"))&&(u?c=u:(ht([t],!0),u=t.style.display||u,c=E.css(t,"display"),ht([t]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===E.css(t,"float")&&(l||(f.done((function(){d.display=u})),null==u&&(c=d.display,u="none"===c?"":c)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",f.always((function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}))),l=!1,h)l||(g?"hidden"in g&&(m=g.hidden):g=K.access(t,"fxshow",{display:u}),i&&(g.hidden=!m),m&&ht([t],!0),f.done((function(){for(o in m||ht([t]),K.remove(t,"fxshow"),h)E.style(t,o,h[o])}))),l=he(m?g[o]:0,o,f),o in g||(g[o]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?de.prefilters.unshift(t):de.prefilters.push(t)}}),E.speed=function(t,e,n){var o=t&&"object"==typeof t?E.extend({},t):{complete:n||!n&&e||v(t)&&t,duration:t,easing:n&&e||e&&!v(e)&&e};return E.fx.off?o.duration=0:"number"!=typeof o.duration&&(o.duration in E.fx.speeds?o.duration=E.fx.speeds[o.duration]:o.duration=E.fx.speeds._default),null!=o.queue&&!0!==o.queue||(o.queue="fx"),o.old=o.complete,o.complete=function(){v(o.old)&&o.old.call(this),o.queue&&E.dequeue(this,o.queue)},o},E.fn.extend({fadeTo:function(t,e,n,o){return this.filter(ut).css("opacity",0).show().end().animate({opacity:e},t,n,o)},animate:function(t,e,n,o){var r=E.isEmptyObject(t),i=E.speed(e,n,o),s=function(){var e=de(this,E.extend({},t),i);(r||K.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(t,e,n){var o=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,r=null!=t&&t+"queueHooks",i=E.timers,s=K.get(this);if(r)s[r]&&s[r].stop&&o(s[r]);else for(r in s)s[r]&&s[r].stop&&ue.test(r)&&o(s[r]);for(r=i.length;r--;)i[r].elem!==this||null!=t&&i[r].queue!==t||(i[r].anim.stop(n),e=!1,i.splice(r,1));!e&&n||E.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=K.get(this),o=n[t+"queue"],r=n[t+"queueHooks"],i=E.timers,s=o?o.length:0;for(n.finish=!0,E.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===t&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<s;e++)o[e]&&o[e].finish&&o[e].finish.call(this);delete n.finish}))}}),E.each(["toggle","show","hide"],(function(t,e){var n=E.fn[e];E.fn[e]=function(t,o,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(fe(e,!0),t,o,r)}})),E.each({slideDown:fe("show"),slideUp:fe("hide"),slideToggle:fe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){E.fn[t]=function(t,n,o){return this.animate(e,t,n,o)}})),E.timers=[],E.fx.tick=function(){var t,e=0,n=E.timers;for(se=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||E.fx.stop(),se=void 0},E.fx.timer=function(t){E.timers.push(t),E.fx.start()},E.fx.interval=13,E.fx.start=function(){ae||(ae=!0,ce())},E.fx.stop=function(){ae=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(t,e){return t=E.fx&&E.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,n){var r=o.setTimeout(e,t);n.stop=function(){o.clearTimeout(r)}}))},function(){var t=b.createElement("input"),e=b.createElement("select").appendChild(b.createElement("option"));t.type="checkbox",g.checkOn=""!==t.value,g.optSelected=e.selected,(t=b.createElement("input")).value="t",t.type="radio",g.radioValue="t"===t.value}();var me,ge=E.expr.attrHandle;E.fn.extend({attr:function(t,e){return z(this,E.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){E.removeAttr(this,t)}))}}),E.extend({attr:function(t,e,n){var o,r,i=t.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===t.getAttribute?E.prop(t,e,n):(1===i&&E.isXMLDoc(t)||(r=E.attrHooks[e.toLowerCase()]||(E.expr.match.bool.test(e)?me:void 0)),void 0!==n?null===n?void E.removeAttr(t,e):r&&"set"in r&&void 0!==(o=r.set(t,n,e))?o:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(o=r.get(t,e))?o:null==(o=E.find.attr(t,e))?void 0:o)},attrHooks:{type:{set:function(t,e){if(!g.radioValue&&"radio"===e&&j(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,o=0,r=e&&e.match(M);if(r&&1===t.nodeType)for(;n=r[o++];)t.removeAttribute(n)}}),me={set:function(t,e,n){return!1===e?E.removeAttr(t,n):t.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=ge[e]||E.find.attr;ge[e]=function(t,e,o){var r,i,s=e.toLowerCase();return o||(i=ge[s],ge[s]=r,r=null!=n(t,e,o)?s:null,ge[s]=i),r}}));var ve=/^(?:input|select|textarea|button)$/i,ye=/^(?:a|area)$/i;function be(t){return(t.match(M)||[]).join(" ")}function xe(t){return t.getAttribute&&t.getAttribute("class")||""}function Te(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(M)||[]}E.fn.extend({prop:function(t,e){return z(this,E.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[E.propFix[t]||t]}))}}),E.extend({prop:function(t,e,n){var o,r,i=t.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&E.isXMLDoc(t)||(e=E.propFix[e]||e,r=E.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(o=r.set(t,n,e))?o:t[e]=n:r&&"get"in r&&null!==(o=r.get(t,e))?o:t[e]},propHooks:{tabIndex:{get:function(t){var e=E.find.attr(t,"tabindex");return e?parseInt(e,10):ve.test(t.nodeName)||ye.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(E.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){E.propFix[this.toLowerCase()]=this})),E.fn.extend({addClass:function(t){var e,n,o,r,i,s;return v(t)?this.each((function(e){E(this).addClass(t.call(this,e,xe(this)))})):(e=Te(t)).length?this.each((function(){if(o=xe(this),n=1===this.nodeType&&" "+be(o)+" "){for(i=0;i<e.length;i++)r=e[i],n.indexOf(" "+r+" ")<0&&(n+=r+" ");s=be(n),o!==s&&this.setAttribute("class",s)}})):this},removeClass:function(t){var e,n,o,r,i,s;return v(t)?this.each((function(e){E(this).removeClass(t.call(this,e,xe(this)))})):arguments.length?(e=Te(t)).length?this.each((function(){if(o=xe(this),n=1===this.nodeType&&" "+be(o)+" "){for(i=0;i<e.length;i++)for(r=e[i];n.indexOf(" "+r+" ")>-1;)n=n.replace(" "+r+" "," ");s=be(n),o!==s&&this.setAttribute("class",s)}})):this:this.attr("class","")},toggleClass:function(t,e){var n,o,r,i,s=typeof t,a="string"===s||Array.isArray(t);return v(t)?this.each((function(n){E(this).toggleClass(t.call(this,n,xe(this),e),e)})):"boolean"==typeof e&&a?e?this.addClass(t):this.removeClass(t):(n=Te(t),this.each((function(){if(a)for(i=E(this),r=0;r<n.length;r++)o=n[r],i.hasClass(o)?i.removeClass(o):i.addClass(o);else void 0!==t&&"boolean"!==s||((o=xe(this))&&K.set(this,"__className__",o),this.setAttribute&&this.setAttribute("class",o||!1===t?"":K.get(this,"__className__")||""))})))},hasClass:function(t){var e,n,o=0;for(e=" "+t+" ";n=this[o++];)if(1===n.nodeType&&(" "+be(xe(n))+" ").indexOf(e)>-1)return!0;return!1}});var we=/\r/g;E.fn.extend({val:function(t){var e,n,o,r=this[0];return arguments.length?(o=v(t),this.each((function(n){var r;1===this.nodeType&&(null==(r=o?t.call(this,n,E(this).val()):t)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=E.map(r,(function(t){return null==t?"":t+""}))),(e=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))}))):r?(e=E.valHooks[r.type]||E.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(we,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(t){var e=E.find.attr(t,"value");return null!=e?e:be(E.text(t))}},select:{get:function(t){var e,n,o,r=t.options,i=t.selectedIndex,s="select-one"===t.type,a=s?null:[],l=s?i+1:r.length;for(o=i<0?l:s?i:0;o<l;o++)if(((n=r[o]).selected||o===i)&&!n.disabled&&(!n.parentNode.disabled||!j(n.parentNode,"optgroup"))){if(e=E(n).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var n,o,r=t.options,i=E.makeArray(e),s=r.length;s--;)((o=r[s]).selected=E.inArray(E.valHooks.option.get(o),i)>-1)&&(n=!0);return n||(t.selectedIndex=-1),i}}}}),E.each(["radio","checkbox"],(function(){E.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=E.inArray(E(t).val(),e)>-1}},g.checkOn||(E.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),g.focusin="onfocusin"in o;var Ce=/^(?:focusinfocus|focusoutblur)$/,Ee=function(t){t.stopPropagation()};E.extend(E.event,{trigger:function(t,e,n,r){var i,s,a,l,u,c,p,f,d=[n||b],m=h.call(t,"type")?t.type:t,g=h.call(t,"namespace")?t.namespace.split("."):[];if(s=f=a=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!Ce.test(m+E.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),u=m.indexOf(":")<0&&"on"+m,(t=t[E.expando]?t:new E.Event(m,"object"==typeof t&&t)).isTrigger=r?2:3,t.namespace=g.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:E.makeArray(e,[t]),p=E.event.special[m]||{},r||!p.trigger||!1!==p.trigger.apply(n,e))){if(!r&&!p.noBubble&&!y(n)){for(l=p.delegateType||m,Ce.test(l+m)||(s=s.parentNode);s;s=s.parentNode)d.push(s),a=s;a===(n.ownerDocument||b)&&d.push(a.defaultView||a.parentWindow||o)}for(i=0;(s=d[i++])&&!t.isPropagationStopped();)f=s,t.type=i>1?l:p.bindType||m,(c=(K.get(s,"events")||Object.create(null))[t.type]&&K.get(s,"handle"))&&c.apply(s,e),(c=u&&s[u])&&c.apply&&Q(s)&&(t.result=c.apply(s,e),!1===t.result&&t.preventDefault());return t.type=m,r||t.isDefaultPrevented()||p._default&&!1!==p._default.apply(d.pop(),e)||!Q(n)||u&&v(n[m])&&!y(n)&&((a=n[u])&&(n[u]=null),E.event.triggered=m,t.isPropagationStopped()&&f.addEventListener(m,Ee),n[m](),t.isPropagationStopped()&&f.removeEventListener(m,Ee),E.event.triggered=void 0,a&&(n[u]=a)),t.result}},simulate:function(t,e,n){var o=E.extend(new E.Event,n,{type:t,isSimulated:!0});E.event.trigger(o,null,e)}}),E.fn.extend({trigger:function(t,e){return this.each((function(){E.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return E.event.trigger(t,e,n,!0)}}),g.focusin||E.each({focus:"focusin",blur:"focusout"},(function(t,e){var n=function(t){E.event.simulate(e,t.target,E.event.fix(t))};E.event.special[e]={setup:function(){var o=this.ownerDocument||this.document||this,r=K.access(o,e);r||o.addEventListener(t,n,!0),K.access(o,e,(r||0)+1)},teardown:function(){var o=this.ownerDocument||this.document||this,r=K.access(o,e)-1;r?K.access(o,e,r):(o.removeEventListener(t,n,!0),K.remove(o,e))}}}));var _e=o.location,Se={guid:Date.now()},Ae=/\?/;E.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{e=(new o.DOMParser).parseFromString(t,"text/xml")}catch(t){}return n=e&&e.getElementsByTagName("parsererror")[0],e&&!n||E.error("Invalid XML: "+(n?E.map(n.childNodes,(function(t){return t.textContent})).join("\n"):t)),e};var ke=/\[\]$/,De=/\r?\n/g,je=/^(?:submit|button|image|reset|file)$/i,Ne=/^(?:input|select|textarea|keygen)/i;function Oe(t,e,n,o){var r;if(Array.isArray(e))E.each(e,(function(e,r){n||ke.test(t)?o(t,r):Oe(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,o)}));else if(n||"object"!==w(e))o(t,e);else for(r in e)Oe(t+"["+r+"]",e[r],n,o)}E.param=function(t,e){var n,o=[],r=function(t,e){var n=v(e)?e():e;o[o.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!E.isPlainObject(t))E.each(t,(function(){r(this.name,this.value)}));else for(n in t)Oe(n,t[n],e,r);return o.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=E.prop(this,"elements");return t?E.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!E(this).is(":disabled")&&Ne.test(this.nodeName)&&!je.test(t)&&(this.checked||!gt.test(t))})).map((function(t,e){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,(function(t){return{name:e.name,value:t.replace(De,"\r\n")}})):{name:e.name,value:n.replace(De,"\r\n")}})).get()}});var Le=/%20/g,qe=/#.*$/,Re=/([?&])_=[^&]*/,He=/^(.*?):[ \t]*([^\r\n]*)$/gm,Fe=/^(?:GET|HEAD)$/,Me=/^\/\//,Pe={},Ie={},We="*/".concat("*"),Be=b.createElement("a");function $e(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var o,r=0,i=e.toLowerCase().match(M)||[];if(v(n))for(;o=i[r++];)"+"===o[0]?(o=o.slice(1)||"*",(t[o]=t[o]||[]).unshift(n)):(t[o]=t[o]||[]).push(n)}}function Ge(t,e,n,o){var r={},i=t===Ie;function s(a){var l;return r[a]=!0,E.each(t[a]||[],(function(t,a){var u=a(e,n,o);return"string"!=typeof u||i||r[u]?i?!(l=u):void 0:(e.dataTypes.unshift(u),s(u),!1)})),l}return s(e.dataTypes[0])||!r["*"]&&s("*")}function ze(t,e){var n,o,r=E.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:o||(o={}))[n]=e[n]);return o&&E.extend(!0,t,o),t}Be.href=_e.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:_e.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(_e.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":We,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?ze(ze(t,E.ajaxSettings),e):ze(E.ajaxSettings,t)},ajaxPrefilter:$e(Pe),ajaxTransport:$e(Ie),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,r,i,s,a,l,u,c,p,f,h=E.ajaxSetup({},e),d=h.context||h,m=h.context&&(d.nodeType||d.jquery)?E(d):E.event,g=E.Deferred(),v=E.Callbacks("once memory"),y=h.statusCode||{},x={},T={},w="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(u){if(!s)for(s={};e=He.exec(i);)s[e[1].toLowerCase()+" "]=(s[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=s[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return u?i:null},setRequestHeader:function(t,e){return null==u&&(t=T[t.toLowerCase()]=T[t.toLowerCase()]||t,x[t]=e),this},overrideMimeType:function(t){return null==u&&(h.mimeType=t),this},statusCode:function(t){var e;if(t)if(u)C.always(t[C.status]);else for(e in t)y[e]=[y[e],t[e]];return this},abort:function(t){var e=t||w;return n&&n.abort(e),_(0,e),this}};if(g.promise(C),h.url=((t||h.url||_e.href)+"").replace(Me,_e.protocol+"//"),h.type=e.method||e.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(M)||[""],null==h.crossDomain){l=b.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Be.protocol+"//"+Be.host!=l.protocol+"//"+l.host}catch(t){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=E.param(h.data,h.traditional)),Ge(Pe,h,e,C),u)return C;for(p in(c=E.event&&h.global)&&0==E.active++&&E.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Fe.test(h.type),r=h.url.replace(qe,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Le,"+")):(f=h.url.slice(r.length),h.data&&(h.processData||"string"==typeof h.data)&&(r+=(Ae.test(r)?"&":"?")+h.data,delete h.data),!1===h.cache&&(r=r.replace(Re,"$1"),f=(Ae.test(r)?"&":"?")+"_="+Se.guid+++f),h.url=r+f),h.ifModified&&(E.lastModified[r]&&C.setRequestHeader("If-Modified-Since",E.lastModified[r]),E.etag[r]&&C.setRequestHeader("If-None-Match",E.etag[r])),(h.data&&h.hasContent&&!1!==h.contentType||e.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+We+"; q=0.01":""):h.accepts["*"]),h.headers)C.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(d,C,h)||u))return C.abort();if(w="abort",v.add(h.complete),C.done(h.success),C.fail(h.error),n=Ge(Ie,h,e,C)){if(C.readyState=1,c&&m.trigger("ajaxSend",[C,h]),u)return C;h.async&&h.timeout>0&&(a=o.setTimeout((function(){C.abort("timeout")}),h.timeout));try{u=!1,n.send(x,_)}catch(t){if(u)throw t;_(-1,t)}}else _(-1,"No Transport");function _(t,e,s,l){var p,f,b,x,T,w=e;u||(u=!0,a&&o.clearTimeout(a),n=void 0,i=l||"",C.readyState=t>0?4:0,p=t>=200&&t<300||304===t,s&&(x=function(t,e,n){for(var o,r,i,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=t.mimeType||e.getResponseHeader("Content-Type"));if(o)for(r in a)if(a[r]&&a[r].test(o)){l.unshift(r);break}if(l[0]in n)i=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){i=r;break}s||(s=r)}i=i||s}if(i)return i!==l[0]&&l.unshift(i),n[i]}(h,C,s)),!p&&E.inArray("script",h.dataTypes)>-1&&E.inArray("json",h.dataTypes)<0&&(h.converters["text script"]=function(){}),x=function(t,e,n,o){var r,i,s,a,l,u={},c=t.dataTypes.slice();if(c[1])for(s in t.converters)u[s.toLowerCase()]=t.converters[s];for(i=c.shift();i;)if(t.responseFields[i]&&(n[t.responseFields[i]]=e),!l&&o&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=i,i=c.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(s=u[l+" "+i]||u["* "+i]))for(r in u)if((a=r.split(" "))[1]===i&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[r]:!0!==u[r]&&(i=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+i}}}return{state:"success",data:e}}(h,x,C,p),p?(h.ifModified&&((T=C.getResponseHeader("Last-Modified"))&&(E.lastModified[r]=T),(T=C.getResponseHeader("etag"))&&(E.etag[r]=T)),204===t||"HEAD"===h.type?w="nocontent":304===t?w="notmodified":(w=x.state,f=x.data,p=!(b=x.error))):(b=w,!t&&w||(w="error",t<0&&(t=0))),C.status=t,C.statusText=(e||w)+"",p?g.resolveWith(d,[f,w,C]):g.rejectWith(d,[C,w,b]),C.statusCode(y),y=void 0,c&&m.trigger(p?"ajaxSuccess":"ajaxError",[C,h,p?f:b]),v.fireWith(d,[C,w]),c&&(m.trigger("ajaxComplete",[C,h]),--E.active||E.event.trigger("ajaxStop")))}return C},getJSON:function(t,e,n){return E.get(t,e,n,"json")},getScript:function(t,e){return E.get(t,void 0,e,"script")}}),E.each(["get","post"],(function(t,e){E[e]=function(t,n,o,r){return v(n)&&(r=r||o,o=n,n=void 0),E.ajax(E.extend({url:t,type:e,dataType:r,data:n,success:o},E.isPlainObject(t)&&t))}})),E.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),E._evalUrl=function(t,e,n){return E.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){E.globalEval(t,e,n)}})},E.fn.extend({wrapAll:function(t){var e;return this[0]&&(v(t)&&(t=t.call(this[0])),e=E(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return v(t)?this.each((function(e){E(this).wrapInner(t.call(this,e))})):this.each((function(){var e=E(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=v(t);return this.each((function(n){E(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){E(this).replaceWith(this.childNodes)})),this}}),E.expr.pseudos.hidden=function(t){return!E.expr.pseudos.visible(t)},E.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new o.XMLHttpRequest}catch(t){}};var Xe={0:200,1223:204},Ue=E.ajaxSettings.xhr();g.cors=!!Ue&&"withCredentials"in Ue,g.ajax=Ue=!!Ue,E.ajaxTransport((function(t){var e,n;if(g.cors||Ue&&!t.crossDomain)return{send:function(r,i){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];for(s in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);e=function(t){return function(){e&&(e=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?i(0,"error"):i(a.status,a.statusText):i(Xe[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),n=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&o.setTimeout((function(){e&&n()}))},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),E.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return E.globalEval(t),t}}}),E.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),E.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(o,r){e=E("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),b.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Ve,Ye=[],Qe=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ye.pop()||E.expando+"_"+Se.guid++;return this[t]=!0,t}}),E.ajaxPrefilter("json jsonp",(function(t,e,n){var r,i,s,a=!1!==t.jsonp&&(Qe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qe.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Qe,"$1"+r):!1!==t.jsonp&&(t.url+=(Ae.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||E.error(r+" was not called"),s[0]},t.dataTypes[0]="json",i=o[r],o[r]=function(){s=arguments},n.always((function(){void 0===i?E(o).removeProp(r):o[r]=i,t[r]&&(t.jsonpCallback=e.jsonpCallback,Ye.push(r)),s&&v(i)&&i(s[0]),s=i=void 0})),"script"})),g.createHTMLDocument=((Ve=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ve.childNodes.length),E.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(g.createHTMLDocument?((o=(e=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,e.head.appendChild(o)):e=b),i=!n&&[],(r=N.exec(t))?[e.createElement(r[1])]:(r=Ct([t],e,i),i&&i.length&&E(i).remove(),E.merge([],r.childNodes)));var o,r,i},E.fn.load=function(t,e,n){var o,r,i,s=this,a=t.indexOf(" ");return a>-1&&(o=be(t.slice(a)),t=t.slice(0,a)),v(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&E.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done((function(t){i=arguments,s.html(o?E("<div>").append(E.parseHTML(t)).find(o):t)})).always(n&&function(t,e){s.each((function(){n.apply(this,i||[t.responseText,e,t])}))}),this},E.expr.pseudos.animated=function(t){return E.grep(E.timers,(function(e){return t===e.elem})).length},E.offset={setOffset:function(t,e,n){var o,r,i,s,a,l,u=E.css(t,"position"),c=E(t),p={};"static"===u&&(t.style.position="relative"),a=c.offset(),i=E.css(t,"top"),l=E.css(t,"left"),("absolute"===u||"fixed"===u)&&(i+l).indexOf("auto")>-1?(s=(o=c.position()).top,r=o.left):(s=parseFloat(i)||0,r=parseFloat(l)||0),v(e)&&(e=e.call(t,n,E.extend({},a))),null!=e.top&&(p.top=e.top-a.top+s),null!=e.left&&(p.left=e.left-a.left+r),"using"in e?e.using.call(t,p):c.css(p)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){E.offset.setOffset(this,t,e)}));var e,n,o=this[0];return o?o.getClientRects().length?(e=o.getBoundingClientRect(),n=o.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,o=this[0],r={top:0,left:0};if("fixed"===E.css(o,"position"))e=o.getBoundingClientRect();else{for(e=this.offset(),n=o.ownerDocument,t=o.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===E.css(t,"position");)t=t.parentNode;t&&t!==o&&1===t.nodeType&&((r=E(t).offset()).top+=E.css(t,"borderTopWidth",!0),r.left+=E.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-E.css(o,"marginTop",!0),left:e.left-r.left-E.css(o,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===E.css(t,"position");)t=t.offsetParent;return t||st}))}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;E.fn[t]=function(o){return z(this,(function(t,o,r){var i;if(y(t)?i=t:9===t.nodeType&&(i=t.defaultView),void 0===r)return i?i[e]:t[o];i?i.scrollTo(n?i.pageXOffset:r,n?r:i.pageYOffset):t[o]=r}),t,o,arguments.length)}})),E.each(["top","left"],(function(t,e){E.cssHooks[e]=Vt(g.pixelPosition,(function(t,n){if(n)return n=Ut(t,e),It.test(n)?E(t).position()[e]+"px":n}))})),E.each({Height:"height",Width:"width"},(function(t,e){E.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,o){E.fn[o]=function(r,i){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===i?"margin":"border");return z(this,(function(e,n,r){var i;return y(e)?0===o.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+t],i["scroll"+t],e.body["offset"+t],i["offset"+t],i["client"+t])):void 0===r?E.css(e,n,a):E.style(e,n,r,a)}),e,s?r:void 0,s)}}))})),E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){E.fn[e]=function(t){return this.on(e,t)}})),E.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,o){return this.on(e,t,n,o)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){E.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}));var Je=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;E.proxy=function(t,e){var n,o,r;if("string"==typeof e&&(n=t[e],e=t,t=n),v(t))return o=a.call(arguments,2),r=function(){return t.apply(e||this,o.concat(a.call(arguments)))},r.guid=t.guid=t.guid||E.guid++,r},E.holdReady=function(t){t?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=j,E.isFunction=v,E.isWindow=y,E.camelCase=Y,E.type=w,E.now=Date.now,E.isNumeric=function(t){var e=E.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},E.trim=function(t){return null==t?"":(t+"").replace(Je,"$1")},void 0===(n=function(){return E}.apply(e,[]))||(t.exports=n);var Ke=o.jQuery,Ze=o.$;return E.noConflict=function(t){return o.$===E&&(o.$=Ze),t&&o.jQuery===E&&(o.jQuery=Ke),E},void 0===r&&(o.jQuery=o.$=E),E}))}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={exports:{}};return t[o].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(638),e=n.n(t),o=n(638);const r=function(){function t(t){this.createBar(t)}return t.prototype.createBar=function(t){this.barElement=o("<div>",{class:"slider-app__bar"}),this.barElement.appendTo(t)},t}();var i=n(638);const s=function(){function t(t,e,n){this.parent=t,this.toggleConfig=e,this.controlConfig=n,this.createToggles(t,e,n)}return t.prototype.createToggles=function(t,e,n){var o=this;this.configElement=i("<div>",{class:"slider-app__config"}),this.toggleElement=i("<div>",{class:"slider-app__toggle"}),this.controlElement=i("<div>",{class:"slider-app__control"}),this.configElement.append(this.toggleElement),this.configElement.prepend(this.controlElement),n.forEach((function(t){var e="slider-app__control--".concat(t);o.controlElement.append(i('<div class="slider-app__control-element">\n                    <div class="slider-app__control-name">\n                        <span class="slider-app__control-name--inner">\n                            '.concat(t,'\n                        </span>\n                    </div>\n                    <input \n                    class="slider-app__control-input ').concat(e,'"\n                    type="number" \n                    />\n                </div>')))})),e.forEach((function(t){var e="slider-app__toggle--".concat(t);o.toggleElement.append(i('\n                <div class="slider-app__toggle-element">\n                    <label class="slider-app__toggle-name" for='.concat(e,">").concat(t,'</label>\n                    <label class="slider-app__toggle-container">\n                        <input class=\'slider-app__toggle-box ').concat(e,'\' type="checkbox">\n                        <span class="slider-app__toggle-btn"></span>\n                    </label>\n                </div>\n      ')))})),this.configElement.appendTo(t)},t}();const a=function(t,n,o){if(this.options=t,this.app=o,this.config=n,this.options.configPanel){this.config||(this.config=new s(this.app,this.options.toggleConfig,this.options.controlConfig));var r=e()(".slider-app__control--min"),i=e()(".slider-app__control--max"),a=e()(".slider-app__control--step"),l=e()(".slider-app__control--from"),u=e()(".slider-app__control--to");r.val(this.options.min),i.val(this.options.max),a.val(this.options.step),l.val(this.options.from),u.val(this.options.to),l.prop("step",this.options.step),u.prop({step:this.options.step,disabled:!this.options.range}),e()(".slider-app__toggle--vertical").prop("checked",this.options.vertical),e()(".slider-app__toggle--range").prop("checked",this.options.range),e()(".slider-app__toggle--rulers").prop("checked",this.options.rulers),e()(".slider-app__toggle--progress").prop("checked",this.options.progress),e()(".slider-app__toggle--tooltip").prop("checked",this.options.tooltip)}else this.config&&(this.config.configElement.remove(),this.config=null)},l=function(){function t(t){this.parent=t,this.createProgress(t)}return t.prototype.createProgress=function(t){this.progressElement=e()("<div>",{class:"slider-app__progress"}),this.progressElement.prependTo(t)},t}(),u=function(t,e,n){this.options=t,this.bar=n,this.progress=e,this.options.progress?(this.progress||(this.progress=new l(this.bar.barElement)),this.options.vertical?this.progress.progressElement.addClass("slider-app__progress--vertical"):this.progress&&this.progress.progressElement.removeClass("slider-app__progress--vertical"),this.options.range||this.progress.progressElement.css("left","auto")):this.progress&&(this.progress.progressElement.remove(),this.progress=null)};var c=n(638);const p=function(){function t(t,e,n,o){this.createRulers(t,e,n,o)}return t.prototype.createRulers=function(t,e,n,o){this.rulersElement=c("<div>",{class:"slider-app__rulers"});for(var r=0;r<e.length;r++)this.rulersElement.append(c("<div>",{class:"slider-app__rulers-value slider-app__rulers-value--".concat(n[r]),text:e[r],css:{left:o?"auto":"".concat(n[r],"px"),bottom:o?"".concat(n[r],"px"):"auto"}}));this.rulersElement.appendTo(t)},t}();var f,h;!function(t){t.VERTICAL="vertical",t.RANGE="range",t.RULERS="rulers",t.PROGRESS="progress",t.TOOLTIP="tooltip"}(f||(f={})),function(t){t.MIN="min",t.MAX="max",t.STEP="step",t.FROM="from",t.TO="to"}(h||(h={}));const d=function(t,e,n,o){return n<0?Math.round(n+t/e*(o-n)):n>0?Math.round(t/e*(o-n)+n):Math.round(t/e*o)},m=function(t,e,n,o){if(n<0){var r=o+Math.abs(n);return(t+Math.abs(n))/r*e}return n>0?(t-n)/(r=o-n)*e:t/o*e};var g;!function(t){t[t.DRAG_FROM=0]="DRAG_FROM",t[t.DRAG_TO=1]="DRAG_TO"}(g||(g={}));const v=g,y=function(t,e){return t<0?0:t>e?e:t},b=function(t,e,n){var o;if(this.options=t,this.bar=n,this.rulers=e,this.options.rulers){if(this.rulers&&(null===(o=this.rulers.rulersElement)||void 0===o||o.remove(),this.rulers=null),!this.rulers){var r=this.bar.barElement.innerWidth(),i=this.bar.barElement.innerHeight(),s=m(this.options.step,this.options.vertical?i:r,this.options.min,this.options.max),a=87;a=s>a?s:a-a%s+s;var l=this.options.vertical?i/a:r/a,u=this.options.vertical?i/l:r/l,c=[],f=[];if(this.options.vertical)for(var h=0;h<i-u;h+=u)c.push(d(h,i,this.options.min,this.options.max)),f.push(h);else for(h=0;h<r-u;h+=u)c.push(d(h,r,this.options.min,this.options.max)),f.push(h);f.push(this.options.vertical?i:r),c.push(this.options.max),this.rulers=new p(this.bar.barElement,c,f,this.options.vertical),this.options.vertical?(this.rulers.rulersElement.addClass("slider-app__rulers--vertical"),this.rulers.rulersElement.children().addClass("slider-app__rulers-value--vertical")):this.rulers&&(this.rulers.rulersElement.removeClass("slider-app__rulers--vertical"),this.rulers.rulersElement.children().removeClass("slider-app__rulers-value--vertical"))}}else this.rulers&&(this.rulers.rulersElement.remove(),this.rulers=null)},x=function(){function t(t){this.parent=t,this.createFromThumb(t)}return t.prototype.createFromThumb=function(t){this.fromThumbElement=e()("<div>",{class:"slider-app__thumb slider-app__thumb-from"}),this.fromThumbElement.appendTo(t)},t}(),T=function(){function t(t){this.parent=t,this.createToThumb(t)}return t.prototype.createToThumb=function(t){this.toThumbElement=e()("<div>",{class:"slider-app__thumb slider-app__thumb-to"}),this.toThumbElement.appendTo(t)},t}(),w=function(t,e,n,o,r){var i,s;if(this.options=t,this.bar=o,this.progress=r,this.fromThumb=e,this.toThumb=n,this.options.range){var a=this.bar.barElement.innerWidth(),l=this.bar.barElement.innerHeight();this.toThumb||(this.toThumb=new T(this.bar.barElement)),this.fromThumb||(this.fromThumb=new x(this.bar.barElement)),this.options.vertical?(this.fromThumb.fromThumbElement.addClass("slider-app__thumb--vertical"),this.toThumb.toThumbElement.addClass("slider-app__thumb--vertical")):(this.toThumb.toThumbElement.removeClass("slider-app__thumb--vertical"),this.fromThumb.fromThumbElement.removeClass("slider-app__thumb--vertical")),this.fromThumb.fromThumbElement.css({bottom:this.options.vertical?"".concat(m(this.options.from,l,this.options.min,this.options.max),"px"):"auto",left:this.options.vertical?"-0.85em":"".concat(m(this.options.from,a,this.options.min,this.options.max),"px")}),this.toThumb.toThumbElement.css({bottom:this.options.vertical?"".concat(m(this.options.to,l,this.options.min,this.options.max),"px"):"auto",left:this.options.vertical?"-0.85em":"".concat(m(this.options.to,a,this.options.min,this.options.max),"px")}),this.options.progress&&this.progress.progressElement.css({left:this.options.vertical?"auto":"".concat(m(this.options.from,a,this.options.min,this.options.max),"px"),bottom:this.options.vertical?"".concat(m(this.options.from,l,this.options.min,this.options.max),"px"):"auto",width:this.options.vertical?"100%":"".concat(m(this.options.to,a,this.options.min,this.options.max)-m(this.options.from,a,this.options.min,this.options.max),"px"),height:this.options.vertical?"".concat(m(this.options.to,l,this.options.min,this.options.max)-m(this.options.from,l,this.options.min,this.options.max),"px"):"100%"})}else a=this.bar.barElement.innerWidth(),l=this.bar.barElement.innerHeight(),this.fromThumb||(this.fromThumb=new x(this.bar.barElement)),this.options.vertical?this.fromThumb.fromThumbElement.addClass("slider-app__thumb--vertical"):this.fromThumb.fromThumbElement.removeClass("slider-app__thumb--vertical"),this.toThumb&&(this.toThumb.toThumbElement.remove(),this.toThumb=null),this.options.vertical?(this.fromThumb.fromThumbElement.css({left:"-0.85em",bottom:"".concat(m(this.options.from,l,this.options.min,this.options.max),"px")}),(null===(s=this.progress)||void 0===s?void 0:s.progressElement)&&this.progress.progressElement.css({width:"100%",bottom:"0",height:"".concat(m(this.options.from,l,this.options.min,this.options.max),"px")})):(this.fromThumb.fromThumbElement.css({bottom:"auto",left:"".concat(m(this.options.from,a,this.options.min,this.options.max),"px")}),(null===(i=this.progress)||void 0===i?void 0:i.progressElement)&&this.progress.progressElement.css({height:"100%",width:"".concat(m(this.options.from,a,this.options.min,this.options.max),"px")}))};var C=n(638);const E=function(){function t(t){this.parent=t,this.createTooltip(t)}return t.prototype.createTooltip=function(t){this.tooltipElement=C("<div>",{class:"slider-app__tooltip"}),this.tooltipElement.prependTo(t)},t}(),_=function(t,e,n,o){if(this.options=t,this.bar=o,this.tooltipFrom=e,this.tooltipTo=n,this.options.tooltip){var r=this.bar.barElement.innerWidth(),i=this.bar.barElement.innerHeight();this.tooltipFrom||(this.tooltipFrom=new E(this.bar.barElement)),this.options.vertical?this.tooltipFrom.tooltipElement.addClass("slider-app__tooltip--vertical"):this.tooltipFrom&&this.tooltipFrom.tooltipElement.removeClass("slider-app__tooltip--vertical");var s=m(this.options.from,this.options.vertical?i:r,this.options.min,this.options.max);if(this.tooltipFrom.tooltipElement.css({left:this.options.vertical?"auto":"".concat(s,"px"),bottom:this.options.vertical?"".concat(s,"px"):"2.2em"}),this.tooltipFrom.tooltipElement.text(this.options.from),this.options.range){this.tooltipTo||(this.tooltipTo=new E(this.bar.barElement)),this.options.vertical?this.tooltipTo.tooltipElement.addClass("slider-app__tooltip--vertical"):this.tooltipTo.tooltipElement.removeClass("slider-app__tooltip--vertical");var a=m(this.options.to,this.options.vertical?i:r,this.options.min,this.options.max);this.tooltipTo.tooltipElement.css({left:this.options.vertical?"auto":"".concat(a,"px"),bottom:this.options.vertical?"".concat(a,"px"):"2.2em"}),this.tooltipTo.tooltipElement.text(this.options.to);var l=parseFloat(this.tooltipFrom.tooltipElement.css("width")),u=parseFloat(this.tooltipFrom.tooltipElement.css("height")),c=parseFloat(this.tooltipTo.tooltipElement.css("width")),p=parseFloat(this.tooltipTo.tooltipElement.css("height")),f=parseFloat(this.tooltipFrom.tooltipElement.css("left")),h=parseFloat(this.tooltipFrom.tooltipElement.css("bottom")),d=parseFloat(this.tooltipTo.tooltipElement.css("left")),g=parseFloat(this.tooltipTo.tooltipElement.css("bottom"));if(this.options.vertical)if(g-h<=Math.max(u,p)){this.tooltipTo.tooltipElement.remove(),this.tooltipTo=null,this.tooltipFrom.tooltipElement.addClass("slider-app__tooltip--merged");var v=(g-h)/2;this.tooltipFrom.tooltipElement.text("".concat(this.options.from," - ").concat(this.options.to)),this.tooltipFrom.tooltipElement.css({bottom:"".concat(h+v,"px")})}else this.tooltipFrom.tooltipElement.removeClass("slider-app__tooltip--merged");else if(d-f<=Math.max(l,c)){this.tooltipTo.tooltipElement.remove(),this.tooltipTo=null,this.tooltipFrom.tooltipElement.addClass("slider-app__tooltip--merged");var y=(d-f)/2;this.tooltipFrom.tooltipElement.text("".concat(this.options.from," - ").concat(this.options.to)),this.tooltipFrom.tooltipElement.css({left:"".concat(f+y,"px")})}else this.tooltipFrom.tooltipElement.removeClass("slider-app__tooltip--merged")}else this.tooltipTo&&(this.tooltipTo.tooltipElement.remove(),this.tooltipTo=null)}else this.tooltipFrom&&(this.tooltipFrom.tooltipElement.remove(),this.tooltipFrom=null),this.tooltipTo&&(this.tooltipTo.tooltipElement.remove(),this.tooltipTo=null),this.bar.barElement.css("margin-top","auto")};const S=function(t,n,o,r,i,s,a){var l,u,c=this;this.app=t,this.options=n,this.bar=o,this.fromThumb=r,this.toThumb=i,this.handler=s,this.e=a;var p=this.bar.barElement.innerWidth(),f=this.bar.barElement.innerHeight(),h=this.bar.barElement.offset().left,m=this.bar.barElement.offset().top;if(a.target.classList.contains(null===(l=this.fromThumb)||void 0===l?void 0:l.fromThumbElement[0].classList[1])){e()(a.target).on("dragstart",(function(){return!1}));var g=function(t){var e=t.pageX-h,n=-(t.pageY-m-f),o=y(e,p),r=y(n,f),i=d(o,p,c.options.min,c.options.max),a=d(r,f,c.options.min,c.options.max);c.options.vertical?c.options.from=a:c.options.from=i,s(c.options,v.DRAG_FROM)};g(a),e()(document).on("mousemove",(function(t){return g(t)})),e()(a.target).on("mouseleave",(function(){e()(document).on("mouseup",(function(){e()(document).off("mousemove"),e()(document).off("mouseup"),e()(a.target).off("mouseleave")}))})),e()(a.target).on("mouseup",(function(){e()(document).off("mousemove"),e()(a.target).off("mouseup")}))}if(this.options.range&&a.target.classList.contains(null===(u=this.toThumb)||void 0===u?void 0:u.toThumbElement[0].classList[1])){e()(a.target).on("dragstart",(function(){return!1}));var b=function(t){var e=t.pageX-h,n=-(t.pageY-m-f),o=y(e,p),r=y(n,f),i=d(o,p,c.options.min,c.options.max),a=d(r,f,c.options.min,c.options.max);c.options.vertical?c.options.to=a:c.options.to=i,s(c.options,v.DRAG_TO)};b(a),e()(document).on("mousemove",(function(t){return b(t)})),e()(a.target).on("mouseleave",(function(){e()(document).on("mouseup",(function(){e()(document).off("mousemove"),e()(document).off("mouseup"),e()(a.target).off("mouseleave")}))})),e()(a.target).on("mouseup",(function(){e()(document).off("mousemove"),e()(a.target).off("mouseup")}))}},A=function(t,e,n,o){this.options=t,this.bar=e,this.handler=n,this.e=o;var r=this.bar.barElement.innerWidth(),i=this.bar.barElement.innerHeight(),s=this.bar.barElement.offset().left,a=this.bar.barElement.offset().top,l=o.pageX-s,u=-(o.pageY-a-i),c=y(this.options.vertical?u:l,this.options.vertical?i:r),p=d(c,this.options.vertical?i:r,this.options.min,this.options.max);this.options.range?Math.abs(p-this.options.from)<Math.abs(p-this.options.to)?(this.options.from=p,n(this.options,v.DRAG_FROM)):(this.options.to=p,n(this.options,v.DRAG_TO)):(this.options.from=p,n(this.options,v.DRAG_FROM))},k=function(t,e,n){this.options=t,this.handler=e,this.e=n,n.target.classList.contains("slider-app__rulers-value")&&(this.options.range?Math.abs(+n.target.textContent-this.options.from)<Math.abs(+n.target.textContent-this.options.to)?(this.options.from=+n.target.textContent,e(this.options,v.DRAG_FROM)):(this.options.to=+n.target.textContent,e(this.options,v.DRAG_TO)):(this.options.from=+n.target.textContent,e(this.options,v.DRAG_FROM)))},D=function(){function t(t,e,n){this.options=t,this.handler=e,this.e=n,this.updateToggleConfig(n,e),this.updateControlConfig(n,e)}return t.prototype.updateToggleConfig=function(t,n){e()(t.target).hasClass("slider-app__toggle--vertical")?(this.options.vertical=e()(t.target).prop("checked"),n(this.options)):e()(t.target).hasClass("slider-app__toggle--range")?(this.options.range=e()(t.target).prop("checked"),n(this.options)):e()(t.target).hasClass("slider-app__toggle--rulers")?(this.options.rulers=e()(t.target).prop("checked"),n(this.options)):e()(t.target).hasClass("slider-app__toggle--progress")?(this.options.progress=e()(t.target).prop("checked"),n(this.options)):e()(t.target).hasClass("slider-app__toggle--tooltip")&&(this.options.tooltip=e()(t.target).prop("checked"),n(this.options))},t.prototype.updateControlConfig=function(t,n){e()(t.target).hasClass("slider-app__control--min")?(this.options.min=+e()(t.target).val(),n(this.options)):e()(t.target).hasClass("slider-app__control--max")?(this.options.max=+e()(t.target).val(),n(this.options)):e()(t.target).hasClass("slider-app__control--step")?(this.options.step=+e()(t.target).val(),n(this.options)):e()(t.target).hasClass("slider-app__control--from")?(this.options.from=+e()(t.target).val(),n(this.options,v.DRAG_FROM)):e()(t.target).hasClass("slider-app__control--to")&&(this.options.to=+e()(t.target).val(),n(this.options,v.DRAG_TO))},t}(),j=function(){function t(t){this.selector=t,this.app=e()(t),this.bar=new r(this.app)}return t.prototype.bindChangeOptions=function(t){var n,o=this;this.app.on("mousedown",(function(e){o.observeThumbsMove=new S(o.app,o.options,o.bar,o.fromThumb,o.toThumb,t,e),o.observeRulersClick=new k(o.options,t,e)})),null===(n=this.bar)||void 0===n||n.barElement.on("mousedown",(function(e){o.observeBarClick=new A(o.options,o.bar,t,e)})),this.app.on("input",(function(e){o.observeConfig=new D(o.options,t,e)})),e()(window).on("resize",(function(){return t(o.options)}))},t.prototype.render=function(t){this.options=t,this.sliderInitial(),this.configInitial(),this.tooltipInitial(),this.progressInitial(),this.thumbsInitial(),this.rulersInitial()},t.prototype.sliderInitial=function(){this.app.addClass("slider-app"),this.options.vertical?(this.app.addClass("slider-app--vertical"),this.bar.barElement.addClass("slider-app__bar--vertical")):(this.app.removeClass("slider-app--vertical"),this.bar.barElement.removeClass("slider-app__bar--vertical"))},t.prototype.configInitial=function(){this.renderConfig=new a(this.options,this.config,this.app),this.config=this.renderConfig.config},t.prototype.tooltipInitial=function(){this.renderTooltip=new _(this.options,this.tooltipFrom,this.tooltipTo,this.bar),this.tooltipFrom=this.renderTooltip.tooltipFrom,this.tooltipTo=this.renderTooltip.tooltipTo},t.prototype.progressInitial=function(){this.renderProgress=new u(this.options,this.progress,this.bar),this.progress=this.renderProgress.progress},t.prototype.thumbsInitial=function(){this.renderThumbs=new w(this.options,this.fromThumb,this.toThumb,this.bar,this.progress),this.fromThumb=this.renderThumbs.fromThumb,this.toThumb=this.renderThumbs.toThumb},t.prototype.rulersInitial=function(){this.renderRulers=new b(this.options,this.rulers,this.bar),this.rulers=this.renderRulers.rulers},t}();var N=function(){return N=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},N.apply(this,arguments)};const O=function(){function t(t){this.optionsReceived=t,this.options=this.checkOptions(t)}return t.prototype.checkOptions=function(t,e){var n,o,r,i,s,a,l,u,c,p,d,m,g,y,b,x,T,w,C=N({},t);if(C.min=null!==(n=C.min)&&void 0!==n?n:0,C.max=null!==(o=C.max)&&void 0!==o?o:1e3,C.from=null!==(r=C.from)&&void 0!==r?r:C.min,C.to=null!==(i=C.to)&&void 0!==i?i:C.max,C.gap=null!==(s=C.gap)&&void 0!==s?s:10*(C.max-C.min)/100,C.step=null!==(a=C.step)&&void 0!==a?a:1,C.vertical=null!==(l=C.vertical)&&void 0!==l&&l,C.rulers=null===(u=C.rulers)||void 0===u||u,C.tooltip=null!==(c=C.tooltip)&&void 0!==c&&c,C.percent=null!==(p=C.percent)&&void 0!==p&&p,C.color=null!==(d=C.color)&&void 0!==d?d:{firstColor:"#ffe53b",secondColor:"#ff2525",textColor:"#ffe53b",thumbColor:"#ffe53b"},C.color.firstColor=null!==(m=C.color.firstColor)&&void 0!==m?m:"#ffe53b",C.color.secondColor=null!==(g=C.color.secondColor)&&void 0!==g?g:"#ff2525",C.color.textColor=null!==(y=C.color.textColor)&&void 0!==y?y:"#ffe53b",C.color.thumbColor=null!==(b=C.color.thumbColor)&&void 0!==b?b:"#ffe53b",C.range=null!==(x=C.range)&&void 0!==x&&x,C.configPanel=null===(T=C.configPanel)||void 0===T||T,C.progress=null===(w=C.progress)||void 0===w||w,C.controlConfig=Object.values(h),C.toggleConfig=Object.values(f),C.min=C.min<C.max?C.min:C.max,C.gap>C.max-C.min&&(C.gap=C.max-C.min),C.step>C.max-C.min&&(C.step=C.max-C.min),C.step<1?C.step=1:C.step>C.max-C.min&&(C.step=C.max-C.min),C.from%C.step!=0){var E=C.from%C.step,_=C.step/2;C.step-E>_?C.from-=E:C.from=C.from+C.step-E}return C.from<C.min&&(C.from=C.min),C.from>C.max&&(C.from=C.max-C.max%C.step),C.to%C.step!=0&&(E=C.to%C.step,_=C.step/2,C.step-E>_?C.to-=E:C.to=C.to+C.step-E),C.to>=C.max&&(C.to=C.max-C.max%C.step),e===v.DRAG_FROM&&C.range&&C.from>=C.to-C.gap&&(C.from=C.step>=C.gap?C.to-C.step:C.to-C.gap-(C.to-C.gap)%C.step),e===v.DRAG_TO&&C.to<=C.from+C.gap&&(C.to=C.step>=C.gap?C.from+C.step:C.from+C.gap-((C.from+C.gap)%C.step-C.step)),C.range&&C.from>=C.to-C.gap&&(C.from=C.step>=C.gap?C.to-C.step:C.to-C.gap-(C.to-C.gap)%C.step),C},t.prototype.changeOptions=function(t,e){this.options=this.checkOptions(t,e),this.commitOptions(this.options)},t.prototype.commitOptions=function(t){this.onOptionsChanged(t)},t.prototype.bindOptionsChanged=function(t){this.onOptionsChanged=t},t}();new function(t,e){var n=this;this.selector=t,this.options=e,this.onOptionsChanged=function(t){n.view.render(t)},this.handleChangeOptions=function(t,e){n.model.changeOptions(t,e)},this.model=new O(e),this.view=new j(t),this.model.bindOptionsChanged(this.onOptionsChanged),this.view.bindChangeOptions(this.handleChangeOptions),this.onOptionsChanged(this.model.options)}("#slider",{max:104,tooltip:!0,range:!0,configPanel:!0,step:33,gap:1})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,